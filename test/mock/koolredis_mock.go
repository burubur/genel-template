// Code generated by MockGen. DO NOT EDIT.
// Source: koolredis.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	"bitbucket.org/kudoindonesia/koolkit/koolredis"
	redis "github.com/go-redis/redis"
	gomock "github.com/golang/mock/gomock"
)

// MockAdapter is a mock of Adapter interface
type MockAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterMockRecorder
}

// MockAdapterMockRecorder is the mock recorder for MockAdapter
type MockAdapterMockRecorder struct {
	mock *MockAdapter
}

// NewMockAdapter creates a new mock instance
func NewMockAdapter(ctrl *gomock.Controller) *MockAdapter {
	mock := &MockAdapter{ctrl: ctrl}
	mock.recorder = &MockAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdapter) EXPECT() *MockAdapterMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockAdapter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockAdapterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAdapter)(nil).Close))
}

// Del mocks base method
func (m *MockAdapter) Del(keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Del indicates an expected call of Del
func (mr *MockAdapterMockRecorder) Del(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockAdapter)(nil).Del), keys...)
}

// Dump mocks base method
func (m *MockAdapter) Dump(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dump indicates an expected call of Dump
func (mr *MockAdapterMockRecorder) Dump(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockAdapter)(nil).Dump), key)
}

// Exists mocks base method
func (m *MockAdapter) Exists(keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exists", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockAdapterMockRecorder) Exists(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockAdapter)(nil).Exists), keys...)
}

// Expire mocks base method
func (m *MockAdapter) Expire(key string, expiration time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expire", key, expiration)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Expire indicates an expected call of Expire
func (mr *MockAdapterMockRecorder) Expire(key, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockAdapter)(nil).Expire), key, expiration)
}

// ExpireAt mocks base method
func (m *MockAdapter) ExpireAt(key string, tm time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireAt", key, tm)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpireAt indicates an expected call of ExpireAt
func (mr *MockAdapterMockRecorder) ExpireAt(key, tm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireAt", reflect.TypeOf((*MockAdapter)(nil).ExpireAt), key, tm)
}

// Keys mocks base method
func (m *MockAdapter) Keys(pattern string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys", pattern)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Keys indicates an expected call of Keys
func (mr *MockAdapterMockRecorder) Keys(pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockAdapter)(nil).Keys), pattern)
}

// Migrate mocks base method
func (m *MockAdapter) Migrate(host, port, key string, db int64, timeout time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate", host, port, key, db, timeout)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Migrate indicates an expected call of Migrate
func (mr *MockAdapterMockRecorder) Migrate(host, port, key, db, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockAdapter)(nil).Migrate), host, port, key, db, timeout)
}

// Move mocks base method
func (m *MockAdapter) Move(key string, db int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Move", key, db)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Move indicates an expected call of Move
func (mr *MockAdapterMockRecorder) Move(key, db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockAdapter)(nil).Move), key, db)
}

// ObjectRefCount mocks base method
func (m *MockAdapter) ObjectRefCount(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectRefCount", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectRefCount indicates an expected call of ObjectRefCount
func (mr *MockAdapterMockRecorder) ObjectRefCount(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectRefCount", reflect.TypeOf((*MockAdapter)(nil).ObjectRefCount), key)
}

// ObjectEncoding mocks base method
func (m *MockAdapter) ObjectEncoding(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectEncoding", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectEncoding indicates an expected call of ObjectEncoding
func (mr *MockAdapterMockRecorder) ObjectEncoding(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectEncoding", reflect.TypeOf((*MockAdapter)(nil).ObjectEncoding), key)
}

// ObjectIdleTime mocks base method
func (m *MockAdapter) ObjectIdleTime(key string) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectIdleTime", key)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectIdleTime indicates an expected call of ObjectIdleTime
func (mr *MockAdapterMockRecorder) ObjectIdleTime(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectIdleTime", reflect.TypeOf((*MockAdapter)(nil).ObjectIdleTime), key)
}

// Persist mocks base method
func (m *MockAdapter) Persist(key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Persist", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Persist indicates an expected call of Persist
func (mr *MockAdapterMockRecorder) Persist(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persist", reflect.TypeOf((*MockAdapter)(nil).Persist), key)
}

// PExpire mocks base method
func (m *MockAdapter) PExpire(key string, expiration time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PExpire", key, expiration)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PExpire indicates an expected call of PExpire
func (mr *MockAdapterMockRecorder) PExpire(key, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PExpire", reflect.TypeOf((*MockAdapter)(nil).PExpire), key, expiration)
}

// PExpireAt mocks base method
func (m *MockAdapter) PExpireAt(key string, tm time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PExpireAt", key, tm)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PExpireAt indicates an expected call of PExpireAt
func (mr *MockAdapterMockRecorder) PExpireAt(key, tm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PExpireAt", reflect.TypeOf((*MockAdapter)(nil).PExpireAt), key, tm)
}

// PTTL mocks base method
func (m *MockAdapter) PTTL(key string) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PTTL", key)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PTTL indicates an expected call of PTTL
func (mr *MockAdapterMockRecorder) PTTL(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PTTL", reflect.TypeOf((*MockAdapter)(nil).PTTL), key)
}

// RandomKey mocks base method
func (m *MockAdapter) RandomKey() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomKey")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RandomKey indicates an expected call of RandomKey
func (mr *MockAdapterMockRecorder) RandomKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomKey", reflect.TypeOf((*MockAdapter)(nil).RandomKey))
}

// Rename mocks base method
func (m *MockAdapter) Rename(key, newKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", key, newKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rename indicates an expected call of Rename
func (mr *MockAdapterMockRecorder) Rename(key, newKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockAdapter)(nil).Rename), key, newKey)
}

// RenameNX mocks base method
func (m *MockAdapter) RenameNX(key, newKey string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameNX", key, newKey)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameNX indicates an expected call of RenameNX
func (mr *MockAdapterMockRecorder) RenameNX(key, newKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameNX", reflect.TypeOf((*MockAdapter)(nil).RenameNX), key, newKey)
}

// Restore mocks base method
func (m *MockAdapter) Restore(key string, ttl time.Duration, value string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", key, ttl, value)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restore indicates an expected call of Restore
func (mr *MockAdapterMockRecorder) Restore(key, ttl, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockAdapter)(nil).Restore), key, ttl, value)
}

// RestoreReplace mocks base method
func (m *MockAdapter) RestoreReplace(key string, ttl time.Duration, value string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreReplace", key, ttl, value)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreReplace indicates an expected call of RestoreReplace
func (mr *MockAdapterMockRecorder) RestoreReplace(key, ttl, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreReplace", reflect.TypeOf((*MockAdapter)(nil).RestoreReplace), key, ttl, value)
}

// Sort mocks base method
func (m *MockAdapter) Sort(key string, sort *redis.Sort) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sort", key, sort)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sort indicates an expected call of Sort
func (mr *MockAdapterMockRecorder) Sort(key, sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sort", reflect.TypeOf((*MockAdapter)(nil).Sort), key, sort)
}

// SortStore mocks base method
func (m *MockAdapter) SortStore(key, store string, sort *redis.Sort) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortStore", key, store, sort)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SortStore indicates an expected call of SortStore
func (mr *MockAdapterMockRecorder) SortStore(key, store, sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortStore", reflect.TypeOf((*MockAdapter)(nil).SortStore), key, store, sort)
}

// SortInterfaces mocks base method
func (m *MockAdapter) SortInterfaces(key string, sort *redis.Sort) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortInterfaces", key, sort)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SortInterfaces indicates an expected call of SortInterfaces
func (mr *MockAdapterMockRecorder) SortInterfaces(key, sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortInterfaces", reflect.TypeOf((*MockAdapter)(nil).SortInterfaces), key, sort)
}

// Touch mocks base method
func (m *MockAdapter) Touch(keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Touch", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Touch indicates an expected call of Touch
func (mr *MockAdapterMockRecorder) Touch(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Touch", reflect.TypeOf((*MockAdapter)(nil).Touch), keys...)
}

// TTL mocks base method
func (m *MockAdapter) TTL(key string) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TTL", key)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TTL indicates an expected call of TTL
func (mr *MockAdapterMockRecorder) TTL(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TTL", reflect.TypeOf((*MockAdapter)(nil).TTL), key)
}

// Type mocks base method
func (m *MockAdapter) Type(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Type indicates an expected call of Type
func (mr *MockAdapterMockRecorder) Type(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockAdapter)(nil).Type), key)
}

// Unlink mocks base method
func (m *MockAdapter) Unlink(keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unlink", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unlink indicates an expected call of Unlink
func (mr *MockAdapterMockRecorder) Unlink(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlink", reflect.TypeOf((*MockAdapter)(nil).Unlink), keys...)
}

// Scan mocks base method
func (m *MockAdapter) Scan(cursor uint64, match string, count int64) ([]string, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", cursor, match, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Scan indicates an expected call of Scan
func (mr *MockAdapterMockRecorder) Scan(cursor, match, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockAdapter)(nil).Scan), cursor, match, count)
}

// Append mocks base method
func (m *MockAdapter) Append(key, value string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", key, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Append indicates an expected call of Append
func (mr *MockAdapterMockRecorder) Append(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockAdapter)(nil).Append), key, value)
}

// BitCount mocks base method
func (m *MockAdapter) BitCount(key string, bitCount *redis.BitCount) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BitCount", key, bitCount)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BitCount indicates an expected call of BitCount
func (mr *MockAdapterMockRecorder) BitCount(key, bitCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitCount", reflect.TypeOf((*MockAdapter)(nil).BitCount), key, bitCount)
}

// BitOpAnd mocks base method
func (m *MockAdapter) BitOpAnd(destKey string, keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{destKey}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitOpAnd", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BitOpAnd indicates an expected call of BitOpAnd
func (mr *MockAdapterMockRecorder) BitOpAnd(destKey interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destKey}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitOpAnd", reflect.TypeOf((*MockAdapter)(nil).BitOpAnd), varargs...)
}

// BitOpOr mocks base method
func (m *MockAdapter) BitOpOr(destKey string, keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{destKey}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitOpOr", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BitOpOr indicates an expected call of BitOpOr
func (mr *MockAdapterMockRecorder) BitOpOr(destKey interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destKey}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitOpOr", reflect.TypeOf((*MockAdapter)(nil).BitOpOr), varargs...)
}

// BitOpXor mocks base method
func (m *MockAdapter) BitOpXor(destKey string, keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{destKey}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitOpXor", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BitOpXor indicates an expected call of BitOpXor
func (mr *MockAdapterMockRecorder) BitOpXor(destKey interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destKey}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitOpXor", reflect.TypeOf((*MockAdapter)(nil).BitOpXor), varargs...)
}

// BitOpNot mocks base method
func (m *MockAdapter) BitOpNot(destKey, key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BitOpNot", destKey, key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BitOpNot indicates an expected call of BitOpNot
func (mr *MockAdapterMockRecorder) BitOpNot(destKey, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitOpNot", reflect.TypeOf((*MockAdapter)(nil).BitOpNot), destKey, key)
}

// BitPos mocks base method
func (m *MockAdapter) BitPos(key string, bit int64, pos ...int64) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key, bit}
	for _, a := range pos {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitPos", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BitPos indicates an expected call of BitPos
func (mr *MockAdapterMockRecorder) BitPos(key, bit interface{}, pos ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key, bit}, pos...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitPos", reflect.TypeOf((*MockAdapter)(nil).BitPos), varargs...)
}

// Decr mocks base method
func (m *MockAdapter) Decr(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decr", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decr indicates an expected call of Decr
func (mr *MockAdapterMockRecorder) Decr(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decr", reflect.TypeOf((*MockAdapter)(nil).Decr), key)
}

// DecrBy mocks base method
func (m *MockAdapter) DecrBy(key string, decrement int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrBy", key, decrement)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecrBy indicates an expected call of DecrBy
func (mr *MockAdapterMockRecorder) DecrBy(key, decrement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrBy", reflect.TypeOf((*MockAdapter)(nil).DecrBy), key, decrement)
}

// Get mocks base method
func (m *MockAdapter) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockAdapterMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAdapter)(nil).Get), key)
}

// GetBit mocks base method
func (m *MockAdapter) GetBit(key string, offset int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBit", key, offset)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBit indicates an expected call of GetBit
func (mr *MockAdapterMockRecorder) GetBit(key, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBit", reflect.TypeOf((*MockAdapter)(nil).GetBit), key, offset)
}

// GetRange mocks base method
func (m *MockAdapter) GetRange(key string, start, end int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRange", key, start, end)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRange indicates an expected call of GetRange
func (mr *MockAdapterMockRecorder) GetRange(key, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRange", reflect.TypeOf((*MockAdapter)(nil).GetRange), key, start, end)
}

// GetSet mocks base method
func (m *MockAdapter) GetSet(key string, value interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSet", key, value)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSet indicates an expected call of GetSet
func (mr *MockAdapterMockRecorder) GetSet(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSet", reflect.TypeOf((*MockAdapter)(nil).GetSet), key, value)
}

// Incr mocks base method
func (m *MockAdapter) Incr(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Incr indicates an expected call of Incr
func (mr *MockAdapterMockRecorder) Incr(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockAdapter)(nil).Incr), key)
}

// IncrBy mocks base method
func (m *MockAdapter) IncrBy(key string, value int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrBy", key, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrBy indicates an expected call of IncrBy
func (mr *MockAdapterMockRecorder) IncrBy(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrBy", reflect.TypeOf((*MockAdapter)(nil).IncrBy), key, value)
}

// IncrByFloat mocks base method
func (m *MockAdapter) IncrByFloat(key string, value float64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrByFloat", key, value)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrByFloat indicates an expected call of IncrByFloat
func (mr *MockAdapterMockRecorder) IncrByFloat(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrByFloat", reflect.TypeOf((*MockAdapter)(nil).IncrByFloat), key, value)
}

// MGet mocks base method
func (m *MockAdapter) MGet(keys ...string) ([]interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGet", varargs...)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGet indicates an expected call of MGet
func (mr *MockAdapterMockRecorder) MGet(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*MockAdapter)(nil).MGet), keys...)
}

// MSet mocks base method
func (m *MockAdapter) MSet(pairs ...interface{}) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range pairs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MSet", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MSet indicates an expected call of MSet
func (mr *MockAdapterMockRecorder) MSet(pairs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSet", reflect.TypeOf((*MockAdapter)(nil).MSet), pairs...)
}

// MSetNX mocks base method
func (m *MockAdapter) MSetNX(pairs ...interface{}) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range pairs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MSetNX", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MSetNX indicates an expected call of MSetNX
func (mr *MockAdapterMockRecorder) MSetNX(pairs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSetNX", reflect.TypeOf((*MockAdapter)(nil).MSetNX), pairs...)
}

// Set mocks base method
func (m *MockAdapter) Set(key string, value interface{}, expiration time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value, expiration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set
func (mr *MockAdapterMockRecorder) Set(key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockAdapter)(nil).Set), key, value, expiration)
}

// SetBit mocks base method
func (m *MockAdapter) SetBit(key string, offset int64, value int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBit", key, offset, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBit indicates an expected call of SetBit
func (mr *MockAdapterMockRecorder) SetBit(key, offset, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBit", reflect.TypeOf((*MockAdapter)(nil).SetBit), key, offset, value)
}

// SetNX mocks base method
func (m *MockAdapter) SetNX(key string, value interface{}, expiration time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNX", key, value, expiration)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNX indicates an expected call of SetNX
func (mr *MockAdapterMockRecorder) SetNX(key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNX", reflect.TypeOf((*MockAdapter)(nil).SetNX), key, value, expiration)
}

// SetXX mocks base method
func (m *MockAdapter) SetXX(key string, value interface{}, expiration time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetXX", key, value, expiration)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetXX indicates an expected call of SetXX
func (mr *MockAdapterMockRecorder) SetXX(key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetXX", reflect.TypeOf((*MockAdapter)(nil).SetXX), key, value, expiration)
}

// SetRange mocks base method
func (m *MockAdapter) SetRange(key string, offset int64, value string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRange", key, offset, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRange indicates an expected call of SetRange
func (mr *MockAdapterMockRecorder) SetRange(key, offset, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRange", reflect.TypeOf((*MockAdapter)(nil).SetRange), key, offset, value)
}

// StrLen mocks base method
func (m *MockAdapter) StrLen(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StrLen", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StrLen indicates an expected call of StrLen
func (mr *MockAdapterMockRecorder) StrLen(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StrLen", reflect.TypeOf((*MockAdapter)(nil).StrLen), key)
}

// HDel mocks base method
func (m *MockAdapter) HDel(key string, fields ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HDel", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HDel indicates an expected call of HDel
func (mr *MockAdapterMockRecorder) HDel(key interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HDel", reflect.TypeOf((*MockAdapter)(nil).HDel), varargs...)
}

// HExists mocks base method
func (m *MockAdapter) HExists(key, field string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HExists", key, field)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HExists indicates an expected call of HExists
func (mr *MockAdapterMockRecorder) HExists(key, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HExists", reflect.TypeOf((*MockAdapter)(nil).HExists), key, field)
}

// HGet mocks base method
func (m *MockAdapter) HGet(key, field string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGet", key, field)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HGet indicates an expected call of HGet
func (mr *MockAdapterMockRecorder) HGet(key, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGet", reflect.TypeOf((*MockAdapter)(nil).HGet), key, field)
}

// HGetAll mocks base method
func (m *MockAdapter) HGetAll(key string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGetAll", key)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HGetAll indicates an expected call of HGetAll
func (mr *MockAdapterMockRecorder) HGetAll(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetAll", reflect.TypeOf((*MockAdapter)(nil).HGetAll), key)
}

// HIncrBy mocks base method
func (m *MockAdapter) HIncrBy(key, field string, incr int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HIncrBy", key, field, incr)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HIncrBy indicates an expected call of HIncrBy
func (mr *MockAdapterMockRecorder) HIncrBy(key, field, incr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HIncrBy", reflect.TypeOf((*MockAdapter)(nil).HIncrBy), key, field, incr)
}

// HIncrByFloat mocks base method
func (m *MockAdapter) HIncrByFloat(key, field string, incr float64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HIncrByFloat", key, field, incr)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HIncrByFloat indicates an expected call of HIncrByFloat
func (mr *MockAdapterMockRecorder) HIncrByFloat(key, field, incr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HIncrByFloat", reflect.TypeOf((*MockAdapter)(nil).HIncrByFloat), key, field, incr)
}

// HKeys mocks base method
func (m *MockAdapter) HKeys(key string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HKeys", key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HKeys indicates an expected call of HKeys
func (mr *MockAdapterMockRecorder) HKeys(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HKeys", reflect.TypeOf((*MockAdapter)(nil).HKeys), key)
}

// HLen mocks base method
func (m *MockAdapter) HLen(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HLen", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HLen indicates an expected call of HLen
func (mr *MockAdapterMockRecorder) HLen(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HLen", reflect.TypeOf((*MockAdapter)(nil).HLen), key)
}

// HMGet mocks base method
func (m *MockAdapter) HMGet(key string, fields ...string) ([]interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HMGet", varargs...)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HMGet indicates an expected call of HMGet
func (mr *MockAdapterMockRecorder) HMGet(key interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMGet", reflect.TypeOf((*MockAdapter)(nil).HMGet), varargs...)
}

// HMSet mocks base method
func (m *MockAdapter) HMSet(key string, fields map[string]interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HMSet", key, fields)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HMSet indicates an expected call of HMSet
func (mr *MockAdapterMockRecorder) HMSet(key, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMSet", reflect.TypeOf((*MockAdapter)(nil).HMSet), key, fields)
}

// HSet mocks base method
func (m *MockAdapter) HSet(key, field string, value interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HSet", key, field, value)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HSet indicates an expected call of HSet
func (mr *MockAdapterMockRecorder) HSet(key, field, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSet", reflect.TypeOf((*MockAdapter)(nil).HSet), key, field, value)
}

// HSetNX mocks base method
func (m *MockAdapter) HSetNX(key, field string, value interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HSetNX", key, field, value)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HSetNX indicates an expected call of HSetNX
func (mr *MockAdapterMockRecorder) HSetNX(key, field, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSetNX", reflect.TypeOf((*MockAdapter)(nil).HSetNX), key, field, value)
}

// HVals mocks base method
func (m *MockAdapter) HVals(key string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HVals", key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HVals indicates an expected call of HVals
func (mr *MockAdapterMockRecorder) HVals(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HVals", reflect.TypeOf((*MockAdapter)(nil).HVals), key)
}

// HScan mocks base method
func (m *MockAdapter) HScan(key string, cursor uint64, match string, count int64) ([]string, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HScan", key, cursor, match, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// HScan indicates an expected call of HScan
func (mr *MockAdapterMockRecorder) HScan(key, cursor, match, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HScan", reflect.TypeOf((*MockAdapter)(nil).HScan), key, cursor, match, count)
}

// BLPop mocks base method
func (m *MockAdapter) BLPop(timeout time.Duration, keys ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{timeout}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BLPop", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BLPop indicates an expected call of BLPop
func (mr *MockAdapterMockRecorder) BLPop(timeout interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{timeout}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BLPop", reflect.TypeOf((*MockAdapter)(nil).BLPop), varargs...)
}

// BRPop mocks base method
func (m *MockAdapter) BRPop(timeout time.Duration, keys ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{timeout}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BRPop", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BRPop indicates an expected call of BRPop
func (mr *MockAdapterMockRecorder) BRPop(timeout interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{timeout}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BRPop", reflect.TypeOf((*MockAdapter)(nil).BRPop), varargs...)
}

// BRPopLPush mocks base method
func (m *MockAdapter) BRPopLPush(source, destination string, timeout time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BRPopLPush", source, destination, timeout)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BRPopLPush indicates an expected call of BRPopLPush
func (mr *MockAdapterMockRecorder) BRPopLPush(source, destination, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BRPopLPush", reflect.TypeOf((*MockAdapter)(nil).BRPopLPush), source, destination, timeout)
}

// LIndex mocks base method
func (m *MockAdapter) LIndex(key string, index int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LIndex", key, index)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LIndex indicates an expected call of LIndex
func (mr *MockAdapterMockRecorder) LIndex(key, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LIndex", reflect.TypeOf((*MockAdapter)(nil).LIndex), key, index)
}

// LInsert mocks base method
func (m *MockAdapter) LInsert(key, op string, pivot, value interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LInsert", key, op, pivot, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LInsert indicates an expected call of LInsert
func (mr *MockAdapterMockRecorder) LInsert(key, op, pivot, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LInsert", reflect.TypeOf((*MockAdapter)(nil).LInsert), key, op, pivot, value)
}

// LInsertBefore mocks base method
func (m *MockAdapter) LInsertBefore(key string, pivot, value interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LInsertBefore", key, pivot, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LInsertBefore indicates an expected call of LInsertBefore
func (mr *MockAdapterMockRecorder) LInsertBefore(key, pivot, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LInsertBefore", reflect.TypeOf((*MockAdapter)(nil).LInsertBefore), key, pivot, value)
}

// LInsertAfter mocks base method
func (m *MockAdapter) LInsertAfter(key string, pivot, value interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LInsertAfter", key, pivot, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LInsertAfter indicates an expected call of LInsertAfter
func (mr *MockAdapterMockRecorder) LInsertAfter(key, pivot, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LInsertAfter", reflect.TypeOf((*MockAdapter)(nil).LInsertAfter), key, pivot, value)
}

// LLen mocks base method
func (m *MockAdapter) LLen(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LLen", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LLen indicates an expected call of LLen
func (mr *MockAdapterMockRecorder) LLen(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LLen", reflect.TypeOf((*MockAdapter)(nil).LLen), key)
}

// LPop mocks base method
func (m *MockAdapter) LPop(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LPop", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LPop indicates an expected call of LPop
func (mr *MockAdapterMockRecorder) LPop(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPop", reflect.TypeOf((*MockAdapter)(nil).LPop), key)
}

// LPush mocks base method
func (m *MockAdapter) LPush(key string, values ...interface{}) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LPush", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LPush indicates an expected call of LPush
func (mr *MockAdapterMockRecorder) LPush(key interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPush", reflect.TypeOf((*MockAdapter)(nil).LPush), varargs...)
}

// LPushX mocks base method
func (m *MockAdapter) LPushX(key string, value interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LPushX", key, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LPushX indicates an expected call of LPushX
func (mr *MockAdapterMockRecorder) LPushX(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPushX", reflect.TypeOf((*MockAdapter)(nil).LPushX), key, value)
}

// LRange mocks base method
func (m *MockAdapter) LRange(key string, start, stop int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LRange", key, start, stop)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LRange indicates an expected call of LRange
func (mr *MockAdapterMockRecorder) LRange(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LRange", reflect.TypeOf((*MockAdapter)(nil).LRange), key, start, stop)
}

// LRem mocks base method
func (m *MockAdapter) LRem(key string, count int64, value interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LRem", key, count, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LRem indicates an expected call of LRem
func (mr *MockAdapterMockRecorder) LRem(key, count, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LRem", reflect.TypeOf((*MockAdapter)(nil).LRem), key, count, value)
}

// LSet mocks base method
func (m *MockAdapter) LSet(key string, index int64, value interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LSet", key, index, value)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LSet indicates an expected call of LSet
func (mr *MockAdapterMockRecorder) LSet(key, index, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LSet", reflect.TypeOf((*MockAdapter)(nil).LSet), key, index, value)
}

// LTrim mocks base method
func (m *MockAdapter) LTrim(key string, start, stop int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LTrim", key, start, stop)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LTrim indicates an expected call of LTrim
func (mr *MockAdapterMockRecorder) LTrim(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LTrim", reflect.TypeOf((*MockAdapter)(nil).LTrim), key, start, stop)
}

// RPop mocks base method
func (m *MockAdapter) RPop(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPop", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RPop indicates an expected call of RPop
func (mr *MockAdapterMockRecorder) RPop(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPop", reflect.TypeOf((*MockAdapter)(nil).RPop), key)
}

// RPopLPush mocks base method
func (m *MockAdapter) RPopLPush(source, destination string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPopLPush", source, destination)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RPopLPush indicates an expected call of RPopLPush
func (mr *MockAdapterMockRecorder) RPopLPush(source, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPopLPush", reflect.TypeOf((*MockAdapter)(nil).RPopLPush), source, destination)
}

// RPush mocks base method
func (m *MockAdapter) RPush(key string, values ...interface{}) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RPush", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RPush indicates an expected call of RPush
func (mr *MockAdapterMockRecorder) RPush(key interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPush", reflect.TypeOf((*MockAdapter)(nil).RPush), varargs...)
}

// RPushX mocks base method
func (m *MockAdapter) RPushX(key string, value interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPushX", key, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RPushX indicates an expected call of RPushX
func (mr *MockAdapterMockRecorder) RPushX(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPushX", reflect.TypeOf((*MockAdapter)(nil).RPushX), key, value)
}

// SAdd mocks base method
func (m *MockAdapter) SAdd(key string, members ...interface{}) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SAdd", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SAdd indicates an expected call of SAdd
func (mr *MockAdapterMockRecorder) SAdd(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SAdd", reflect.TypeOf((*MockAdapter)(nil).SAdd), varargs...)
}

// SCard mocks base method
func (m *MockAdapter) SCard(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SCard", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SCard indicates an expected call of SCard
func (mr *MockAdapterMockRecorder) SCard(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SCard", reflect.TypeOf((*MockAdapter)(nil).SCard), key)
}

// SDiff mocks base method
func (m *MockAdapter) SDiff(keys ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SDiff", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SDiff indicates an expected call of SDiff
func (mr *MockAdapterMockRecorder) SDiff(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SDiff", reflect.TypeOf((*MockAdapter)(nil).SDiff), keys...)
}

// SDiffStore mocks base method
func (m *MockAdapter) SDiffStore(destination string, keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{destination}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SDiffStore", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SDiffStore indicates an expected call of SDiffStore
func (mr *MockAdapterMockRecorder) SDiffStore(destination interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destination}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SDiffStore", reflect.TypeOf((*MockAdapter)(nil).SDiffStore), varargs...)
}

// SInter mocks base method
func (m *MockAdapter) SInter(keys ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SInter", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SInter indicates an expected call of SInter
func (mr *MockAdapterMockRecorder) SInter(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SInter", reflect.TypeOf((*MockAdapter)(nil).SInter), keys...)
}

// SInterStore mocks base method
func (m *MockAdapter) SInterStore(destination string, keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{destination}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SInterStore", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SInterStore indicates an expected call of SInterStore
func (mr *MockAdapterMockRecorder) SInterStore(destination interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destination}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SInterStore", reflect.TypeOf((*MockAdapter)(nil).SInterStore), varargs...)
}

// SIsMember mocks base method
func (m *MockAdapter) SIsMember(key string, member interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SIsMember", key, member)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SIsMember indicates an expected call of SIsMember
func (mr *MockAdapterMockRecorder) SIsMember(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SIsMember", reflect.TypeOf((*MockAdapter)(nil).SIsMember), key, member)
}

// SMembers mocks base method
func (m *MockAdapter) SMembers(key string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMembers", key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SMembers indicates an expected call of SMembers
func (mr *MockAdapterMockRecorder) SMembers(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMembers", reflect.TypeOf((*MockAdapter)(nil).SMembers), key)
}

// SMembersMap mocks base method
func (m *MockAdapter) SMembersMap(key string) (map[string]struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMembersMap", key)
	ret0, _ := ret[0].(map[string]struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SMembersMap indicates an expected call of SMembersMap
func (mr *MockAdapterMockRecorder) SMembersMap(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMembersMap", reflect.TypeOf((*MockAdapter)(nil).SMembersMap), key)
}

// SMove mocks base method
func (m *MockAdapter) SMove(source, destination string, member interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMove", source, destination, member)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SMove indicates an expected call of SMove
func (mr *MockAdapterMockRecorder) SMove(source, destination, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMove", reflect.TypeOf((*MockAdapter)(nil).SMove), source, destination, member)
}

// SPop mocks base method
func (m *MockAdapter) SPop(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SPop", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SPop indicates an expected call of SPop
func (mr *MockAdapterMockRecorder) SPop(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SPop", reflect.TypeOf((*MockAdapter)(nil).SPop), key)
}

// SPopN mocks base method
func (m *MockAdapter) SPopN(key string, count int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SPopN", key, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SPopN indicates an expected call of SPopN
func (mr *MockAdapterMockRecorder) SPopN(key, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SPopN", reflect.TypeOf((*MockAdapter)(nil).SPopN), key, count)
}

// SRandMember mocks base method
func (m *MockAdapter) SRandMember(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SRandMember", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SRandMember indicates an expected call of SRandMember
func (mr *MockAdapterMockRecorder) SRandMember(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SRandMember", reflect.TypeOf((*MockAdapter)(nil).SRandMember), key)
}

// SRandMemberN mocks base method
func (m *MockAdapter) SRandMemberN(key string, count int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SRandMemberN", key, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SRandMemberN indicates an expected call of SRandMemberN
func (mr *MockAdapterMockRecorder) SRandMemberN(key, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SRandMemberN", reflect.TypeOf((*MockAdapter)(nil).SRandMemberN), key, count)
}

// SRem mocks base method
func (m *MockAdapter) SRem(key string, members ...interface{}) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SRem", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SRem indicates an expected call of SRem
func (mr *MockAdapterMockRecorder) SRem(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SRem", reflect.TypeOf((*MockAdapter)(nil).SRem), varargs...)
}

// SUnion mocks base method
func (m *MockAdapter) SUnion(keys ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SUnion", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SUnion indicates an expected call of SUnion
func (mr *MockAdapterMockRecorder) SUnion(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SUnion", reflect.TypeOf((*MockAdapter)(nil).SUnion), keys...)
}

// SUnionStore mocks base method
func (m *MockAdapter) SUnionStore(destination string, keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{destination}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SUnionStore", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SUnionStore indicates an expected call of SUnionStore
func (mr *MockAdapterMockRecorder) SUnionStore(destination interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destination}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SUnionStore", reflect.TypeOf((*MockAdapter)(nil).SUnionStore), varargs...)
}

// SScan mocks base method
func (m *MockAdapter) SScan(key string, cursor uint64, match string, count int64) ([]string, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SScan", key, cursor, match, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SScan indicates an expected call of SScan
func (mr *MockAdapterMockRecorder) SScan(key, cursor, match, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SScan", reflect.TypeOf((*MockAdapter)(nil).SScan), key, cursor, match, count)
}

// ZAdd mocks base method
func (m *MockAdapter) ZAdd(key string, members ...redis.Z) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAdd", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZAdd indicates an expected call of ZAdd
func (mr *MockAdapterMockRecorder) ZAdd(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAdd", reflect.TypeOf((*MockAdapter)(nil).ZAdd), varargs...)
}

// ZAddNX mocks base method
func (m *MockAdapter) ZAddNX(key string, members ...redis.Z) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAddNX", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZAddNX indicates an expected call of ZAddNX
func (mr *MockAdapterMockRecorder) ZAddNX(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddNX", reflect.TypeOf((*MockAdapter)(nil).ZAddNX), varargs...)
}

// ZAddXX mocks base method
func (m *MockAdapter) ZAddXX(key string, members ...redis.Z) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAddXX", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZAddXX indicates an expected call of ZAddXX
func (mr *MockAdapterMockRecorder) ZAddXX(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddXX", reflect.TypeOf((*MockAdapter)(nil).ZAddXX), varargs...)
}

// ZAddCh mocks base method
func (m *MockAdapter) ZAddCh(key string, members ...redis.Z) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAddCh", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZAddCh indicates an expected call of ZAddCh
func (mr *MockAdapterMockRecorder) ZAddCh(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddCh", reflect.TypeOf((*MockAdapter)(nil).ZAddCh), varargs...)
}

// ZAddNXCh mocks base method
func (m *MockAdapter) ZAddNXCh(key string, members ...redis.Z) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAddNXCh", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZAddNXCh indicates an expected call of ZAddNXCh
func (mr *MockAdapterMockRecorder) ZAddNXCh(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddNXCh", reflect.TypeOf((*MockAdapter)(nil).ZAddNXCh), varargs...)
}

// ZAddXXCh mocks base method
func (m *MockAdapter) ZAddXXCh(key string, members ...redis.Z) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAddXXCh", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZAddXXCh indicates an expected call of ZAddXXCh
func (mr *MockAdapterMockRecorder) ZAddXXCh(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddXXCh", reflect.TypeOf((*MockAdapter)(nil).ZAddXXCh), varargs...)
}

// ZIncr mocks base method
func (m *MockAdapter) ZIncr(key string, member redis.Z) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZIncr", key, member)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZIncr indicates an expected call of ZIncr
func (mr *MockAdapterMockRecorder) ZIncr(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZIncr", reflect.TypeOf((*MockAdapter)(nil).ZIncr), key, member)
}

// ZIncrNX mocks base method
func (m *MockAdapter) ZIncrNX(key string, member redis.Z) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZIncrNX", key, member)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZIncrNX indicates an expected call of ZIncrNX
func (mr *MockAdapterMockRecorder) ZIncrNX(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZIncrNX", reflect.TypeOf((*MockAdapter)(nil).ZIncrNX), key, member)
}

// ZIncrXX mocks base method
func (m *MockAdapter) ZIncrXX(key string, member redis.Z) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZIncrXX", key, member)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZIncrXX indicates an expected call of ZIncrXX
func (mr *MockAdapterMockRecorder) ZIncrXX(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZIncrXX", reflect.TypeOf((*MockAdapter)(nil).ZIncrXX), key, member)
}

// ZCard mocks base method
func (m *MockAdapter) ZCard(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZCard", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZCard indicates an expected call of ZCard
func (mr *MockAdapterMockRecorder) ZCard(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZCard", reflect.TypeOf((*MockAdapter)(nil).ZCard), key)
}

// ZCount mocks base method
func (m *MockAdapter) ZCount(key, min, max string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZCount", key, min, max)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZCount indicates an expected call of ZCount
func (mr *MockAdapterMockRecorder) ZCount(key, min, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZCount", reflect.TypeOf((*MockAdapter)(nil).ZCount), key, min, max)
}

// ZLexCount mocks base method
func (m *MockAdapter) ZLexCount(key, min, max string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZLexCount", key, min, max)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZLexCount indicates an expected call of ZLexCount
func (mr *MockAdapterMockRecorder) ZLexCount(key, min, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZLexCount", reflect.TypeOf((*MockAdapter)(nil).ZLexCount), key, min, max)
}

// ZIncrBy mocks base method
func (m *MockAdapter) ZIncrBy(key string, increment float64, member string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZIncrBy", key, increment, member)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZIncrBy indicates an expected call of ZIncrBy
func (mr *MockAdapterMockRecorder) ZIncrBy(key, increment, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZIncrBy", reflect.TypeOf((*MockAdapter)(nil).ZIncrBy), key, increment, member)
}

// ZInterStore mocks base method
func (m *MockAdapter) ZInterStore(destination string, store redis.ZStore, keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{destination, store}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZInterStore", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZInterStore indicates an expected call of ZInterStore
func (mr *MockAdapterMockRecorder) ZInterStore(destination, store interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destination, store}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZInterStore", reflect.TypeOf((*MockAdapter)(nil).ZInterStore), varargs...)
}

// ZPopMax mocks base method
func (m *MockAdapter) ZPopMax(key string, count ...int64) ([]redis.Z, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range count {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZPopMax", varargs...)
	ret0, _ := ret[0].([]redis.Z)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZPopMax indicates an expected call of ZPopMax
func (mr *MockAdapterMockRecorder) ZPopMax(key interface{}, count ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, count...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZPopMax", reflect.TypeOf((*MockAdapter)(nil).ZPopMax), varargs...)
}

// ZPopMin mocks base method
func (m *MockAdapter) ZPopMin(key string, count ...int64) ([]redis.Z, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range count {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZPopMin", varargs...)
	ret0, _ := ret[0].([]redis.Z)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZPopMin indicates an expected call of ZPopMin
func (mr *MockAdapterMockRecorder) ZPopMin(key interface{}, count ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, count...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZPopMin", reflect.TypeOf((*MockAdapter)(nil).ZPopMin), varargs...)
}

// ZRange mocks base method
func (m *MockAdapter) ZRange(key string, start, stop int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRange", key, start, stop)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRange indicates an expected call of ZRange
func (mr *MockAdapterMockRecorder) ZRange(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRange", reflect.TypeOf((*MockAdapter)(nil).ZRange), key, start, stop)
}

// ZRangeWithScores mocks base method
func (m *MockAdapter) ZRangeWithScores(key string, start, stop int64) ([]redis.Z, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeWithScores", key, start, stop)
	ret0, _ := ret[0].([]redis.Z)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRangeWithScores indicates an expected call of ZRangeWithScores
func (mr *MockAdapterMockRecorder) ZRangeWithScores(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeWithScores", reflect.TypeOf((*MockAdapter)(nil).ZRangeWithScores), key, start, stop)
}

// ZRangeByScore mocks base method
func (m *MockAdapter) ZRangeByScore(key string, opt redis.ZRangeBy) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeByScore", key, opt)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRangeByScore indicates an expected call of ZRangeByScore
func (mr *MockAdapterMockRecorder) ZRangeByScore(key, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeByScore", reflect.TypeOf((*MockAdapter)(nil).ZRangeByScore), key, opt)
}

// ZRangeByLex mocks base method
func (m *MockAdapter) ZRangeByLex(key string, opt redis.ZRangeBy) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeByLex", key, opt)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRangeByLex indicates an expected call of ZRangeByLex
func (mr *MockAdapterMockRecorder) ZRangeByLex(key, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeByLex", reflect.TypeOf((*MockAdapter)(nil).ZRangeByLex), key, opt)
}

// ZRangeByScoreWithScores mocks base method
func (m *MockAdapter) ZRangeByScoreWithScores(key string, opt redis.ZRangeBy) ([]redis.Z, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeByScoreWithScores", key, opt)
	ret0, _ := ret[0].([]redis.Z)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRangeByScoreWithScores indicates an expected call of ZRangeByScoreWithScores
func (mr *MockAdapterMockRecorder) ZRangeByScoreWithScores(key, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeByScoreWithScores", reflect.TypeOf((*MockAdapter)(nil).ZRangeByScoreWithScores), key, opt)
}

// ZRank mocks base method
func (m *MockAdapter) ZRank(key, member string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRank", key, member)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRank indicates an expected call of ZRank
func (mr *MockAdapterMockRecorder) ZRank(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRank", reflect.TypeOf((*MockAdapter)(nil).ZRank), key, member)
}

// ZRem mocks base method
func (m *MockAdapter) ZRem(key string, members ...interface{}) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZRem", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRem indicates an expected call of ZRem
func (mr *MockAdapterMockRecorder) ZRem(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRem", reflect.TypeOf((*MockAdapter)(nil).ZRem), varargs...)
}

// ZRemRangeByRank mocks base method
func (m *MockAdapter) ZRemRangeByRank(key string, start, stop int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRemRangeByRank", key, start, stop)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRemRangeByRank indicates an expected call of ZRemRangeByRank
func (mr *MockAdapterMockRecorder) ZRemRangeByRank(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRemRangeByRank", reflect.TypeOf((*MockAdapter)(nil).ZRemRangeByRank), key, start, stop)
}

// ZRemRangeByScore mocks base method
func (m *MockAdapter) ZRemRangeByScore(key, min, max string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRemRangeByScore", key, min, max)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRemRangeByScore indicates an expected call of ZRemRangeByScore
func (mr *MockAdapterMockRecorder) ZRemRangeByScore(key, min, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRemRangeByScore", reflect.TypeOf((*MockAdapter)(nil).ZRemRangeByScore), key, min, max)
}

// ZRemRangeByLex mocks base method
func (m *MockAdapter) ZRemRangeByLex(key, min, max string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRemRangeByLex", key, min, max)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRemRangeByLex indicates an expected call of ZRemRangeByLex
func (mr *MockAdapterMockRecorder) ZRemRangeByLex(key, min, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRemRangeByLex", reflect.TypeOf((*MockAdapter)(nil).ZRemRangeByLex), key, min, max)
}

// ZRevRange mocks base method
func (m *MockAdapter) ZRevRange(key string, start, stop int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRange", key, start, stop)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRevRange indicates an expected call of ZRevRange
func (mr *MockAdapterMockRecorder) ZRevRange(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRange", reflect.TypeOf((*MockAdapter)(nil).ZRevRange), key, start, stop)
}

// ZRevRangeWithScores mocks base method
func (m *MockAdapter) ZRevRangeWithScores(key string, start, stop int64) ([]redis.Z, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRangeWithScores", key, start, stop)
	ret0, _ := ret[0].([]redis.Z)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRevRangeWithScores indicates an expected call of ZRevRangeWithScores
func (mr *MockAdapterMockRecorder) ZRevRangeWithScores(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRangeWithScores", reflect.TypeOf((*MockAdapter)(nil).ZRevRangeWithScores), key, start, stop)
}

// ZRevRangeByScore mocks base method
func (m *MockAdapter) ZRevRangeByScore(key string, opt redis.ZRangeBy) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRangeByScore", key, opt)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRevRangeByScore indicates an expected call of ZRevRangeByScore
func (mr *MockAdapterMockRecorder) ZRevRangeByScore(key, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRangeByScore", reflect.TypeOf((*MockAdapter)(nil).ZRevRangeByScore), key, opt)
}

// ZRevRangeByLex mocks base method
func (m *MockAdapter) ZRevRangeByLex(key string, opt redis.ZRangeBy) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRangeByLex", key, opt)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRevRangeByLex indicates an expected call of ZRevRangeByLex
func (mr *MockAdapterMockRecorder) ZRevRangeByLex(key, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRangeByLex", reflect.TypeOf((*MockAdapter)(nil).ZRevRangeByLex), key, opt)
}

// ZRevRangeByScoreWithScores mocks base method
func (m *MockAdapter) ZRevRangeByScoreWithScores(key string, opt redis.ZRangeBy) ([]redis.Z, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRangeByScoreWithScores", key, opt)
	ret0, _ := ret[0].([]redis.Z)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRevRangeByScoreWithScores indicates an expected call of ZRevRangeByScoreWithScores
func (mr *MockAdapterMockRecorder) ZRevRangeByScoreWithScores(key, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRangeByScoreWithScores", reflect.TypeOf((*MockAdapter)(nil).ZRevRangeByScoreWithScores), key, opt)
}

// ZRevRank mocks base method
func (m *MockAdapter) ZRevRank(key, member string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRank", key, member)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRevRank indicates an expected call of ZRevRank
func (mr *MockAdapterMockRecorder) ZRevRank(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRank", reflect.TypeOf((*MockAdapter)(nil).ZRevRank), key, member)
}

// ZScore mocks base method
func (m *MockAdapter) ZScore(key, member string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZScore", key, member)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZScore indicates an expected call of ZScore
func (mr *MockAdapterMockRecorder) ZScore(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZScore", reflect.TypeOf((*MockAdapter)(nil).ZScore), key, member)
}

// ZUnionStore mocks base method
func (m *MockAdapter) ZUnionStore(dest string, store redis.ZStore, keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest, store}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZUnionStore", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZUnionStore indicates an expected call of ZUnionStore
func (mr *MockAdapterMockRecorder) ZUnionStore(dest, store interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest, store}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZUnionStore", reflect.TypeOf((*MockAdapter)(nil).ZUnionStore), varargs...)
}

// ZScan mocks base method
func (m *MockAdapter) ZScan(key string, cursor uint64, match string, count int64) ([]string, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZScan", key, cursor, match, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ZScan indicates an expected call of ZScan
func (mr *MockAdapterMockRecorder) ZScan(key, cursor, match, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZScan", reflect.TypeOf((*MockAdapter)(nil).ZScan), key, cursor, match, count)
}

// GeoAdd mocks base method
func (m *MockAdapter) GeoAdd(key string, geoLocation ...*redis.GeoLocation) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range geoLocation {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GeoAdd", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoAdd indicates an expected call of GeoAdd
func (mr *MockAdapterMockRecorder) GeoAdd(key interface{}, geoLocation ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, geoLocation...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoAdd", reflect.TypeOf((*MockAdapter)(nil).GeoAdd), varargs...)
}

// GeoPos mocks base method
func (m *MockAdapter) GeoPos(key string, members ...string) ([]*redis.GeoPos, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GeoPos", varargs...)
	ret0, _ := ret[0].([]*redis.GeoPos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoPos indicates an expected call of GeoPos
func (mr *MockAdapterMockRecorder) GeoPos(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoPos", reflect.TypeOf((*MockAdapter)(nil).GeoPos), varargs...)
}

// GeoRadius mocks base method
func (m *MockAdapter) GeoRadius(key string, longitude, latitude float64, query *redis.GeoRadiusQuery) ([]redis.GeoLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoRadius", key, longitude, latitude, query)
	ret0, _ := ret[0].([]redis.GeoLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoRadius indicates an expected call of GeoRadius
func (mr *MockAdapterMockRecorder) GeoRadius(key, longitude, latitude, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoRadius", reflect.TypeOf((*MockAdapter)(nil).GeoRadius), key, longitude, latitude, query)
}

// GeoRadiusRO mocks base method
func (m *MockAdapter) GeoRadiusRO(key string, longitude, latitude float64, query *redis.GeoRadiusQuery) ([]redis.GeoLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoRadiusRO", key, longitude, latitude, query)
	ret0, _ := ret[0].([]redis.GeoLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoRadiusRO indicates an expected call of GeoRadiusRO
func (mr *MockAdapterMockRecorder) GeoRadiusRO(key, longitude, latitude, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoRadiusRO", reflect.TypeOf((*MockAdapter)(nil).GeoRadiusRO), key, longitude, latitude, query)
}

// GeoRadiusByMember mocks base method
func (m *MockAdapter) GeoRadiusByMember(key, member string, query *redis.GeoRadiusQuery) ([]redis.GeoLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoRadiusByMember", key, member, query)
	ret0, _ := ret[0].([]redis.GeoLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoRadiusByMember indicates an expected call of GeoRadiusByMember
func (mr *MockAdapterMockRecorder) GeoRadiusByMember(key, member, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoRadiusByMember", reflect.TypeOf((*MockAdapter)(nil).GeoRadiusByMember), key, member, query)
}

// GeoRadiusByMemberRO mocks base method
func (m *MockAdapter) GeoRadiusByMemberRO(key, member string, query *redis.GeoRadiusQuery) ([]redis.GeoLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoRadiusByMemberRO", key, member, query)
	ret0, _ := ret[0].([]redis.GeoLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoRadiusByMemberRO indicates an expected call of GeoRadiusByMemberRO
func (mr *MockAdapterMockRecorder) GeoRadiusByMemberRO(key, member, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoRadiusByMemberRO", reflect.TypeOf((*MockAdapter)(nil).GeoRadiusByMemberRO), key, member, query)
}

// GeoDist mocks base method
func (m *MockAdapter) GeoDist(key, member1, member2, unit string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoDist", key, member1, member2, unit)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoDist indicates an expected call of GeoDist
func (mr *MockAdapterMockRecorder) GeoDist(key, member1, member2, unit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoDist", reflect.TypeOf((*MockAdapter)(nil).GeoDist), key, member1, member2, unit)
}

// GeoHash mocks base method
func (m *MockAdapter) GeoHash(key string, members ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GeoHash", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoHash indicates an expected call of GeoHash
func (mr *MockAdapterMockRecorder) GeoHash(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoHash", reflect.TypeOf((*MockAdapter)(nil).GeoHash), varargs...)
}

// Publish mocks base method
func (m *MockAdapter) Publish(channel string, message interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", channel, message)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish
func (mr *MockAdapterMockRecorder) Publish(channel, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockAdapter)(nil).Publish), channel, message)
}

// PubSubChannels mocks base method
func (m *MockAdapter) PubSubChannels(pattern string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PubSubChannels", pattern)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PubSubChannels indicates an expected call of PubSubChannels
func (mr *MockAdapterMockRecorder) PubSubChannels(pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubSubChannels", reflect.TypeOf((*MockAdapter)(nil).PubSubChannels), pattern)
}

// PubSubNumSub mocks base method
func (m *MockAdapter) PubSubNumSub(channels ...string) (map[string]int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range channels {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PubSubNumSub", varargs...)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PubSubNumSub indicates an expected call of PubSubNumSub
func (mr *MockAdapterMockRecorder) PubSubNumSub(channels ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubSubNumSub", reflect.TypeOf((*MockAdapter)(nil).PubSubNumSub), channels...)
}

// PubSubNumPat mocks base method
func (m *MockAdapter) PubSubNumPat() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PubSubNumPat")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PubSubNumPat indicates an expected call of PubSubNumPat
func (mr *MockAdapterMockRecorder) PubSubNumPat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubSubNumPat", reflect.TypeOf((*MockAdapter)(nil).PubSubNumPat))
}

// XAdd mocks base method
func (m *MockAdapter) XAdd(a *redis.XAddArgs) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XAdd", a)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XAdd indicates an expected call of XAdd
func (mr *MockAdapterMockRecorder) XAdd(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XAdd", reflect.TypeOf((*MockAdapter)(nil).XAdd), a)
}

// XLen mocks base method
func (m *MockAdapter) XLen(stream string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XLen", stream)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XLen indicates an expected call of XLen
func (mr *MockAdapterMockRecorder) XLen(stream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XLen", reflect.TypeOf((*MockAdapter)(nil).XLen), stream)
}

// XRange mocks base method
func (m *MockAdapter) XRange(stream, start, stop string) ([]redis.XMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRange", stream, start, stop)
	ret0, _ := ret[0].([]redis.XMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XRange indicates an expected call of XRange
func (mr *MockAdapterMockRecorder) XRange(stream, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRange", reflect.TypeOf((*MockAdapter)(nil).XRange), stream, start, stop)
}

// XRangeN mocks base method
func (m *MockAdapter) XRangeN(stream, start, stop string, count int64) ([]redis.XMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRangeN", stream, start, stop, count)
	ret0, _ := ret[0].([]redis.XMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XRangeN indicates an expected call of XRangeN
func (mr *MockAdapterMockRecorder) XRangeN(stream, start, stop, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRangeN", reflect.TypeOf((*MockAdapter)(nil).XRangeN), stream, start, stop, count)
}

// XRevRange mocks base method
func (m *MockAdapter) XRevRange(stream, start, stop string) ([]redis.XMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRevRange", stream, start, stop)
	ret0, _ := ret[0].([]redis.XMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XRevRange indicates an expected call of XRevRange
func (mr *MockAdapterMockRecorder) XRevRange(stream, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRevRange", reflect.TypeOf((*MockAdapter)(nil).XRevRange), stream, start, stop)
}

// XRevRangeN mocks base method
func (m *MockAdapter) XRevRangeN(stream, start, stop string, count int64) ([]redis.XMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRevRangeN", stream, start, stop, count)
	ret0, _ := ret[0].([]redis.XMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XRevRangeN indicates an expected call of XRevRangeN
func (mr *MockAdapterMockRecorder) XRevRangeN(stream, start, stop, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRevRangeN", reflect.TypeOf((*MockAdapter)(nil).XRevRangeN), stream, start, stop, count)
}

// XRead mocks base method
func (m *MockAdapter) XRead(a *redis.XReadArgs) ([]redis.XStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRead", a)
	ret0, _ := ret[0].([]redis.XStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XRead indicates an expected call of XRead
func (mr *MockAdapterMockRecorder) XRead(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRead", reflect.TypeOf((*MockAdapter)(nil).XRead), a)
}

// XReadStreams mocks base method
func (m *MockAdapter) XReadStreams(streams ...string) ([]redis.XStream, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range streams {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XReadStreams", varargs...)
	ret0, _ := ret[0].([]redis.XStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XReadStreams indicates an expected call of XReadStreams
func (mr *MockAdapterMockRecorder) XReadStreams(streams ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XReadStreams", reflect.TypeOf((*MockAdapter)(nil).XReadStreams), streams...)
}

// XGroupCreate mocks base method
func (m *MockAdapter) XGroupCreate(stream, group, start string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupCreate", stream, group, start)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XGroupCreate indicates an expected call of XGroupCreate
func (mr *MockAdapterMockRecorder) XGroupCreate(stream, group, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupCreate", reflect.TypeOf((*MockAdapter)(nil).XGroupCreate), stream, group, start)
}

// XGroupSetID mocks base method
func (m *MockAdapter) XGroupSetID(stream, group, start string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupSetID", stream, group, start)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XGroupSetID indicates an expected call of XGroupSetID
func (mr *MockAdapterMockRecorder) XGroupSetID(stream, group, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupSetID", reflect.TypeOf((*MockAdapter)(nil).XGroupSetID), stream, group, start)
}

// XGroupDestroy mocks base method
func (m *MockAdapter) XGroupDestroy(stream, group string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupDestroy", stream, group)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XGroupDestroy indicates an expected call of XGroupDestroy
func (mr *MockAdapterMockRecorder) XGroupDestroy(stream, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupDestroy", reflect.TypeOf((*MockAdapter)(nil).XGroupDestroy), stream, group)
}

// XGroupDelConsumer mocks base method
func (m *MockAdapter) XGroupDelConsumer(stream, group, consumer string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupDelConsumer", stream, group, consumer)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XGroupDelConsumer indicates an expected call of XGroupDelConsumer
func (mr *MockAdapterMockRecorder) XGroupDelConsumer(stream, group, consumer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupDelConsumer", reflect.TypeOf((*MockAdapter)(nil).XGroupDelConsumer), stream, group, consumer)
}

// XReadGroup mocks base method
func (m *MockAdapter) XReadGroup(a *redis.XReadGroupArgs) ([]redis.XStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XReadGroup", a)
	ret0, _ := ret[0].([]redis.XStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XReadGroup indicates an expected call of XReadGroup
func (mr *MockAdapterMockRecorder) XReadGroup(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XReadGroup", reflect.TypeOf((*MockAdapter)(nil).XReadGroup), a)
}

// XAck mocks base method
func (m *MockAdapter) XAck(stream, group string, ids ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{stream, group}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XAck", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XAck indicates an expected call of XAck
func (mr *MockAdapterMockRecorder) XAck(stream, group interface{}, ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{stream, group}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XAck", reflect.TypeOf((*MockAdapter)(nil).XAck), varargs...)
}

// XPending mocks base method
func (m *MockAdapter) XPending(stream, group string) (*redis.XPending, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XPending", stream, group)
	ret0, _ := ret[0].(*redis.XPending)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XPending indicates an expected call of XPending
func (mr *MockAdapterMockRecorder) XPending(stream, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XPending", reflect.TypeOf((*MockAdapter)(nil).XPending), stream, group)
}

// XPendingExt mocks base method
func (m *MockAdapter) XPendingExt(a *redis.XPendingExtArgs) ([]redis.XPendingExt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XPendingExt", a)
	ret0, _ := ret[0].([]redis.XPendingExt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XPendingExt indicates an expected call of XPendingExt
func (mr *MockAdapterMockRecorder) XPendingExt(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XPendingExt", reflect.TypeOf((*MockAdapter)(nil).XPendingExt), a)
}

// XClaim mocks base method
func (m *MockAdapter) XClaim(a *redis.XClaimArgs) ([]redis.XMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XClaim", a)
	ret0, _ := ret[0].([]redis.XMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XClaim indicates an expected call of XClaim
func (mr *MockAdapterMockRecorder) XClaim(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XClaim", reflect.TypeOf((*MockAdapter)(nil).XClaim), a)
}

// XClaimJustID mocks base method
func (m *MockAdapter) XClaimJustID(a *redis.XClaimArgs) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XClaimJustID", a)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XClaimJustID indicates an expected call of XClaimJustID
func (mr *MockAdapterMockRecorder) XClaimJustID(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XClaimJustID", reflect.TypeOf((*MockAdapter)(nil).XClaimJustID), a)
}

// XTrim mocks base method
func (m *MockAdapter) XTrim(key string, maxLen int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XTrim", key, maxLen)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XTrim indicates an expected call of XTrim
func (mr *MockAdapterMockRecorder) XTrim(key, maxLen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XTrim", reflect.TypeOf((*MockAdapter)(nil).XTrim), key, maxLen)
}

// XTrimApprox mocks base method
func (m *MockAdapter) XTrimApprox(key string, maxLen int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XTrimApprox", key, maxLen)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XTrimApprox indicates an expected call of XTrimApprox
func (mr *MockAdapterMockRecorder) XTrimApprox(key, maxLen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XTrimApprox", reflect.TypeOf((*MockAdapter)(nil).XTrimApprox), key, maxLen)
}

// PFAdd mocks base method
func (m *MockAdapter) PFAdd(key string, els ...interface{}) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range els {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PFAdd", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PFAdd indicates an expected call of PFAdd
func (mr *MockAdapterMockRecorder) PFAdd(key interface{}, els ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, els...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PFAdd", reflect.TypeOf((*MockAdapter)(nil).PFAdd), varargs...)
}

// PFCount mocks base method
func (m *MockAdapter) PFCount(keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PFCount", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PFCount indicates an expected call of PFCount
func (mr *MockAdapterMockRecorder) PFCount(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PFCount", reflect.TypeOf((*MockAdapter)(nil).PFCount), keys...)
}

// PFMerge mocks base method
func (m *MockAdapter) PFMerge(dest string, keys ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PFMerge", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PFMerge indicates an expected call of PFMerge
func (mr *MockAdapterMockRecorder) PFMerge(dest interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PFMerge", reflect.TypeOf((*MockAdapter)(nil).PFMerge), varargs...)
}

// Subscribe mocks base method
func (m *MockAdapter) Subscribe(channels ...string) koolredis.Subscriber {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range channels {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(koolredis.Subscriber)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockAdapterMockRecorder) Subscribe(channels ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockAdapter)(nil).Subscribe), channels...)
}

// PSubscribe mocks base method
func (m *MockAdapter) PSubscribe(channels ...string) koolredis.Subscriber {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range channels {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PSubscribe", varargs...)
	ret0, _ := ret[0].(koolredis.Subscriber)
	return ret0
}

// PSubscribe indicates an expected call of PSubscribe
func (mr *MockAdapterMockRecorder) PSubscribe(channels ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PSubscribe", reflect.TypeOf((*MockAdapter)(nil).PSubscribe), channels...)
}

// Pipeline mocks base method
func (m *MockAdapter) Pipeline() redis.Pipeliner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pipeline")
	ret0, _ := ret[0].(redis.Pipeliner)
	return ret0
}

// Pipeline indicates an expected call of Pipeline
func (mr *MockAdapterMockRecorder) Pipeline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pipeline", reflect.TypeOf((*MockAdapter)(nil).Pipeline))
}

// TxPipeline mocks base method
func (m *MockAdapter) TxPipeline() redis.Pipeliner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxPipeline")
	ret0, _ := ret[0].(redis.Pipeliner)
	return ret0
}

// TxPipeline indicates an expected call of TxPipeline
func (mr *MockAdapterMockRecorder) TxPipeline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxPipeline", reflect.TypeOf((*MockAdapter)(nil).TxPipeline))
}

// HealthCheck mocks base method
func (m *MockAdapter) HealthCheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck
func (mr *MockAdapterMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockAdapter)(nil).HealthCheck))
}

// WithContext mocks base method
func (m *MockAdapter) WithContext(ctx context.Context) koolredis.Adapter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", ctx)
	ret0, _ := ret[0].(koolredis.Adapter)
	return ret0
}

// WithContext indicates an expected call of WithContext
func (mr *MockAdapterMockRecorder) WithContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockAdapter)(nil).WithContext), ctx)
}

// MockKeysOperator is a mock of KeysOperator interface
type MockKeysOperator struct {
	ctrl     *gomock.Controller
	recorder *MockKeysOperatorMockRecorder
}

// MockKeysOperatorMockRecorder is the mock recorder for MockKeysOperator
type MockKeysOperatorMockRecorder struct {
	mock *MockKeysOperator
}

// NewMockKeysOperator creates a new mock instance
func NewMockKeysOperator(ctrl *gomock.Controller) *MockKeysOperator {
	mock := &MockKeysOperator{ctrl: ctrl}
	mock.recorder = &MockKeysOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeysOperator) EXPECT() *MockKeysOperatorMockRecorder {
	return m.recorder
}

// Del mocks base method
func (m *MockKeysOperator) Del(keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Del indicates an expected call of Del
func (mr *MockKeysOperatorMockRecorder) Del(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockKeysOperator)(nil).Del), keys...)
}

// Dump mocks base method
func (m *MockKeysOperator) Dump(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dump indicates an expected call of Dump
func (mr *MockKeysOperatorMockRecorder) Dump(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockKeysOperator)(nil).Dump), key)
}

// Exists mocks base method
func (m *MockKeysOperator) Exists(keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exists", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockKeysOperatorMockRecorder) Exists(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockKeysOperator)(nil).Exists), keys...)
}

// Expire mocks base method
func (m *MockKeysOperator) Expire(key string, expiration time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expire", key, expiration)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Expire indicates an expected call of Expire
func (mr *MockKeysOperatorMockRecorder) Expire(key, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockKeysOperator)(nil).Expire), key, expiration)
}

// ExpireAt mocks base method
func (m *MockKeysOperator) ExpireAt(key string, tm time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireAt", key, tm)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpireAt indicates an expected call of ExpireAt
func (mr *MockKeysOperatorMockRecorder) ExpireAt(key, tm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireAt", reflect.TypeOf((*MockKeysOperator)(nil).ExpireAt), key, tm)
}

// Keys mocks base method
func (m *MockKeysOperator) Keys(pattern string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys", pattern)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Keys indicates an expected call of Keys
func (mr *MockKeysOperatorMockRecorder) Keys(pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockKeysOperator)(nil).Keys), pattern)
}

// Migrate mocks base method
func (m *MockKeysOperator) Migrate(host, port, key string, db int64, timeout time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate", host, port, key, db, timeout)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Migrate indicates an expected call of Migrate
func (mr *MockKeysOperatorMockRecorder) Migrate(host, port, key, db, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockKeysOperator)(nil).Migrate), host, port, key, db, timeout)
}

// Move mocks base method
func (m *MockKeysOperator) Move(key string, db int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Move", key, db)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Move indicates an expected call of Move
func (mr *MockKeysOperatorMockRecorder) Move(key, db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockKeysOperator)(nil).Move), key, db)
}

// ObjectRefCount mocks base method
func (m *MockKeysOperator) ObjectRefCount(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectRefCount", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectRefCount indicates an expected call of ObjectRefCount
func (mr *MockKeysOperatorMockRecorder) ObjectRefCount(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectRefCount", reflect.TypeOf((*MockKeysOperator)(nil).ObjectRefCount), key)
}

// ObjectEncoding mocks base method
func (m *MockKeysOperator) ObjectEncoding(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectEncoding", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectEncoding indicates an expected call of ObjectEncoding
func (mr *MockKeysOperatorMockRecorder) ObjectEncoding(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectEncoding", reflect.TypeOf((*MockKeysOperator)(nil).ObjectEncoding), key)
}

// ObjectIdleTime mocks base method
func (m *MockKeysOperator) ObjectIdleTime(key string) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectIdleTime", key)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectIdleTime indicates an expected call of ObjectIdleTime
func (mr *MockKeysOperatorMockRecorder) ObjectIdleTime(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectIdleTime", reflect.TypeOf((*MockKeysOperator)(nil).ObjectIdleTime), key)
}

// Persist mocks base method
func (m *MockKeysOperator) Persist(key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Persist", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Persist indicates an expected call of Persist
func (mr *MockKeysOperatorMockRecorder) Persist(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persist", reflect.TypeOf((*MockKeysOperator)(nil).Persist), key)
}

// PExpire mocks base method
func (m *MockKeysOperator) PExpire(key string, expiration time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PExpire", key, expiration)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PExpire indicates an expected call of PExpire
func (mr *MockKeysOperatorMockRecorder) PExpire(key, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PExpire", reflect.TypeOf((*MockKeysOperator)(nil).PExpire), key, expiration)
}

// PExpireAt mocks base method
func (m *MockKeysOperator) PExpireAt(key string, tm time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PExpireAt", key, tm)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PExpireAt indicates an expected call of PExpireAt
func (mr *MockKeysOperatorMockRecorder) PExpireAt(key, tm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PExpireAt", reflect.TypeOf((*MockKeysOperator)(nil).PExpireAt), key, tm)
}

// PTTL mocks base method
func (m *MockKeysOperator) PTTL(key string) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PTTL", key)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PTTL indicates an expected call of PTTL
func (mr *MockKeysOperatorMockRecorder) PTTL(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PTTL", reflect.TypeOf((*MockKeysOperator)(nil).PTTL), key)
}

// RandomKey mocks base method
func (m *MockKeysOperator) RandomKey() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomKey")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RandomKey indicates an expected call of RandomKey
func (mr *MockKeysOperatorMockRecorder) RandomKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomKey", reflect.TypeOf((*MockKeysOperator)(nil).RandomKey))
}

// Rename mocks base method
func (m *MockKeysOperator) Rename(key, newKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", key, newKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rename indicates an expected call of Rename
func (mr *MockKeysOperatorMockRecorder) Rename(key, newKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockKeysOperator)(nil).Rename), key, newKey)
}

// RenameNX mocks base method
func (m *MockKeysOperator) RenameNX(key, newKey string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameNX", key, newKey)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameNX indicates an expected call of RenameNX
func (mr *MockKeysOperatorMockRecorder) RenameNX(key, newKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameNX", reflect.TypeOf((*MockKeysOperator)(nil).RenameNX), key, newKey)
}

// Restore mocks base method
func (m *MockKeysOperator) Restore(key string, ttl time.Duration, value string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", key, ttl, value)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restore indicates an expected call of Restore
func (mr *MockKeysOperatorMockRecorder) Restore(key, ttl, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockKeysOperator)(nil).Restore), key, ttl, value)
}

// RestoreReplace mocks base method
func (m *MockKeysOperator) RestoreReplace(key string, ttl time.Duration, value string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreReplace", key, ttl, value)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreReplace indicates an expected call of RestoreReplace
func (mr *MockKeysOperatorMockRecorder) RestoreReplace(key, ttl, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreReplace", reflect.TypeOf((*MockKeysOperator)(nil).RestoreReplace), key, ttl, value)
}

// Sort mocks base method
func (m *MockKeysOperator) Sort(key string, sort *redis.Sort) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sort", key, sort)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sort indicates an expected call of Sort
func (mr *MockKeysOperatorMockRecorder) Sort(key, sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sort", reflect.TypeOf((*MockKeysOperator)(nil).Sort), key, sort)
}

// SortStore mocks base method
func (m *MockKeysOperator) SortStore(key, store string, sort *redis.Sort) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortStore", key, store, sort)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SortStore indicates an expected call of SortStore
func (mr *MockKeysOperatorMockRecorder) SortStore(key, store, sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortStore", reflect.TypeOf((*MockKeysOperator)(nil).SortStore), key, store, sort)
}

// SortInterfaces mocks base method
func (m *MockKeysOperator) SortInterfaces(key string, sort *redis.Sort) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortInterfaces", key, sort)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SortInterfaces indicates an expected call of SortInterfaces
func (mr *MockKeysOperatorMockRecorder) SortInterfaces(key, sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortInterfaces", reflect.TypeOf((*MockKeysOperator)(nil).SortInterfaces), key, sort)
}

// Touch mocks base method
func (m *MockKeysOperator) Touch(keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Touch", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Touch indicates an expected call of Touch
func (mr *MockKeysOperatorMockRecorder) Touch(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Touch", reflect.TypeOf((*MockKeysOperator)(nil).Touch), keys...)
}

// TTL mocks base method
func (m *MockKeysOperator) TTL(key string) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TTL", key)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TTL indicates an expected call of TTL
func (mr *MockKeysOperatorMockRecorder) TTL(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TTL", reflect.TypeOf((*MockKeysOperator)(nil).TTL), key)
}

// Type mocks base method
func (m *MockKeysOperator) Type(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Type indicates an expected call of Type
func (mr *MockKeysOperatorMockRecorder) Type(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockKeysOperator)(nil).Type), key)
}

// Unlink mocks base method
func (m *MockKeysOperator) Unlink(keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unlink", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unlink indicates an expected call of Unlink
func (mr *MockKeysOperatorMockRecorder) Unlink(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlink", reflect.TypeOf((*MockKeysOperator)(nil).Unlink), keys...)
}

// Scan mocks base method
func (m *MockKeysOperator) Scan(cursor uint64, match string, count int64) ([]string, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", cursor, match, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Scan indicates an expected call of Scan
func (mr *MockKeysOperatorMockRecorder) Scan(cursor, match, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockKeysOperator)(nil).Scan), cursor, match, count)
}

// MockStringsOperator is a mock of StringsOperator interface
type MockStringsOperator struct {
	ctrl     *gomock.Controller
	recorder *MockStringsOperatorMockRecorder
}

// MockStringsOperatorMockRecorder is the mock recorder for MockStringsOperator
type MockStringsOperatorMockRecorder struct {
	mock *MockStringsOperator
}

// NewMockStringsOperator creates a new mock instance
func NewMockStringsOperator(ctrl *gomock.Controller) *MockStringsOperator {
	mock := &MockStringsOperator{ctrl: ctrl}
	mock.recorder = &MockStringsOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStringsOperator) EXPECT() *MockStringsOperatorMockRecorder {
	return m.recorder
}

// Append mocks base method
func (m *MockStringsOperator) Append(key, value string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", key, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Append indicates an expected call of Append
func (mr *MockStringsOperatorMockRecorder) Append(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockStringsOperator)(nil).Append), key, value)
}

// BitCount mocks base method
func (m *MockStringsOperator) BitCount(key string, bitCount *redis.BitCount) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BitCount", key, bitCount)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BitCount indicates an expected call of BitCount
func (mr *MockStringsOperatorMockRecorder) BitCount(key, bitCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitCount", reflect.TypeOf((*MockStringsOperator)(nil).BitCount), key, bitCount)
}

// BitOpAnd mocks base method
func (m *MockStringsOperator) BitOpAnd(destKey string, keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{destKey}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitOpAnd", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BitOpAnd indicates an expected call of BitOpAnd
func (mr *MockStringsOperatorMockRecorder) BitOpAnd(destKey interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destKey}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitOpAnd", reflect.TypeOf((*MockStringsOperator)(nil).BitOpAnd), varargs...)
}

// BitOpOr mocks base method
func (m *MockStringsOperator) BitOpOr(destKey string, keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{destKey}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitOpOr", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BitOpOr indicates an expected call of BitOpOr
func (mr *MockStringsOperatorMockRecorder) BitOpOr(destKey interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destKey}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitOpOr", reflect.TypeOf((*MockStringsOperator)(nil).BitOpOr), varargs...)
}

// BitOpXor mocks base method
func (m *MockStringsOperator) BitOpXor(destKey string, keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{destKey}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitOpXor", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BitOpXor indicates an expected call of BitOpXor
func (mr *MockStringsOperatorMockRecorder) BitOpXor(destKey interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destKey}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitOpXor", reflect.TypeOf((*MockStringsOperator)(nil).BitOpXor), varargs...)
}

// BitOpNot mocks base method
func (m *MockStringsOperator) BitOpNot(destKey, key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BitOpNot", destKey, key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BitOpNot indicates an expected call of BitOpNot
func (mr *MockStringsOperatorMockRecorder) BitOpNot(destKey, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitOpNot", reflect.TypeOf((*MockStringsOperator)(nil).BitOpNot), destKey, key)
}

// BitPos mocks base method
func (m *MockStringsOperator) BitPos(key string, bit int64, pos ...int64) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key, bit}
	for _, a := range pos {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitPos", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BitPos indicates an expected call of BitPos
func (mr *MockStringsOperatorMockRecorder) BitPos(key, bit interface{}, pos ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key, bit}, pos...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitPos", reflect.TypeOf((*MockStringsOperator)(nil).BitPos), varargs...)
}

// Decr mocks base method
func (m *MockStringsOperator) Decr(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decr", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decr indicates an expected call of Decr
func (mr *MockStringsOperatorMockRecorder) Decr(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decr", reflect.TypeOf((*MockStringsOperator)(nil).Decr), key)
}

// DecrBy mocks base method
func (m *MockStringsOperator) DecrBy(key string, decrement int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrBy", key, decrement)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecrBy indicates an expected call of DecrBy
func (mr *MockStringsOperatorMockRecorder) DecrBy(key, decrement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrBy", reflect.TypeOf((*MockStringsOperator)(nil).DecrBy), key, decrement)
}

// Get mocks base method
func (m *MockStringsOperator) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStringsOperatorMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStringsOperator)(nil).Get), key)
}

// GetBit mocks base method
func (m *MockStringsOperator) GetBit(key string, offset int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBit", key, offset)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBit indicates an expected call of GetBit
func (mr *MockStringsOperatorMockRecorder) GetBit(key, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBit", reflect.TypeOf((*MockStringsOperator)(nil).GetBit), key, offset)
}

// GetRange mocks base method
func (m *MockStringsOperator) GetRange(key string, start, end int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRange", key, start, end)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRange indicates an expected call of GetRange
func (mr *MockStringsOperatorMockRecorder) GetRange(key, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRange", reflect.TypeOf((*MockStringsOperator)(nil).GetRange), key, start, end)
}

// GetSet mocks base method
func (m *MockStringsOperator) GetSet(key string, value interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSet", key, value)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSet indicates an expected call of GetSet
func (mr *MockStringsOperatorMockRecorder) GetSet(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSet", reflect.TypeOf((*MockStringsOperator)(nil).GetSet), key, value)
}

// Incr mocks base method
func (m *MockStringsOperator) Incr(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Incr indicates an expected call of Incr
func (mr *MockStringsOperatorMockRecorder) Incr(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockStringsOperator)(nil).Incr), key)
}

// IncrBy mocks base method
func (m *MockStringsOperator) IncrBy(key string, value int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrBy", key, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrBy indicates an expected call of IncrBy
func (mr *MockStringsOperatorMockRecorder) IncrBy(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrBy", reflect.TypeOf((*MockStringsOperator)(nil).IncrBy), key, value)
}

// IncrByFloat mocks base method
func (m *MockStringsOperator) IncrByFloat(key string, value float64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrByFloat", key, value)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrByFloat indicates an expected call of IncrByFloat
func (mr *MockStringsOperatorMockRecorder) IncrByFloat(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrByFloat", reflect.TypeOf((*MockStringsOperator)(nil).IncrByFloat), key, value)
}

// MGet mocks base method
func (m *MockStringsOperator) MGet(keys ...string) ([]interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGet", varargs...)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGet indicates an expected call of MGet
func (mr *MockStringsOperatorMockRecorder) MGet(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*MockStringsOperator)(nil).MGet), keys...)
}

// MSet mocks base method
func (m *MockStringsOperator) MSet(pairs ...interface{}) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range pairs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MSet", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MSet indicates an expected call of MSet
func (mr *MockStringsOperatorMockRecorder) MSet(pairs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSet", reflect.TypeOf((*MockStringsOperator)(nil).MSet), pairs...)
}

// MSetNX mocks base method
func (m *MockStringsOperator) MSetNX(pairs ...interface{}) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range pairs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MSetNX", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MSetNX indicates an expected call of MSetNX
func (mr *MockStringsOperatorMockRecorder) MSetNX(pairs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSetNX", reflect.TypeOf((*MockStringsOperator)(nil).MSetNX), pairs...)
}

// Set mocks base method
func (m *MockStringsOperator) Set(key string, value interface{}, expiration time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value, expiration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set
func (mr *MockStringsOperatorMockRecorder) Set(key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStringsOperator)(nil).Set), key, value, expiration)
}

// SetBit mocks base method
func (m *MockStringsOperator) SetBit(key string, offset int64, value int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBit", key, offset, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBit indicates an expected call of SetBit
func (mr *MockStringsOperatorMockRecorder) SetBit(key, offset, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBit", reflect.TypeOf((*MockStringsOperator)(nil).SetBit), key, offset, value)
}

// SetNX mocks base method
func (m *MockStringsOperator) SetNX(key string, value interface{}, expiration time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNX", key, value, expiration)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNX indicates an expected call of SetNX
func (mr *MockStringsOperatorMockRecorder) SetNX(key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNX", reflect.TypeOf((*MockStringsOperator)(nil).SetNX), key, value, expiration)
}

// SetXX mocks base method
func (m *MockStringsOperator) SetXX(key string, value interface{}, expiration time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetXX", key, value, expiration)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetXX indicates an expected call of SetXX
func (mr *MockStringsOperatorMockRecorder) SetXX(key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetXX", reflect.TypeOf((*MockStringsOperator)(nil).SetXX), key, value, expiration)
}

// SetRange mocks base method
func (m *MockStringsOperator) SetRange(key string, offset int64, value string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRange", key, offset, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRange indicates an expected call of SetRange
func (mr *MockStringsOperatorMockRecorder) SetRange(key, offset, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRange", reflect.TypeOf((*MockStringsOperator)(nil).SetRange), key, offset, value)
}

// StrLen mocks base method
func (m *MockStringsOperator) StrLen(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StrLen", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StrLen indicates an expected call of StrLen
func (mr *MockStringsOperatorMockRecorder) StrLen(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StrLen", reflect.TypeOf((*MockStringsOperator)(nil).StrLen), key)
}

// MockHashesOperator is a mock of HashesOperator interface
type MockHashesOperator struct {
	ctrl     *gomock.Controller
	recorder *MockHashesOperatorMockRecorder
}

// MockHashesOperatorMockRecorder is the mock recorder for MockHashesOperator
type MockHashesOperatorMockRecorder struct {
	mock *MockHashesOperator
}

// NewMockHashesOperator creates a new mock instance
func NewMockHashesOperator(ctrl *gomock.Controller) *MockHashesOperator {
	mock := &MockHashesOperator{ctrl: ctrl}
	mock.recorder = &MockHashesOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHashesOperator) EXPECT() *MockHashesOperatorMockRecorder {
	return m.recorder
}

// HDel mocks base method
func (m *MockHashesOperator) HDel(key string, fields ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HDel", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HDel indicates an expected call of HDel
func (mr *MockHashesOperatorMockRecorder) HDel(key interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HDel", reflect.TypeOf((*MockHashesOperator)(nil).HDel), varargs...)
}

// HExists mocks base method
func (m *MockHashesOperator) HExists(key, field string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HExists", key, field)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HExists indicates an expected call of HExists
func (mr *MockHashesOperatorMockRecorder) HExists(key, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HExists", reflect.TypeOf((*MockHashesOperator)(nil).HExists), key, field)
}

// HGet mocks base method
func (m *MockHashesOperator) HGet(key, field string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGet", key, field)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HGet indicates an expected call of HGet
func (mr *MockHashesOperatorMockRecorder) HGet(key, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGet", reflect.TypeOf((*MockHashesOperator)(nil).HGet), key, field)
}

// HGetAll mocks base method
func (m *MockHashesOperator) HGetAll(key string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGetAll", key)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HGetAll indicates an expected call of HGetAll
func (mr *MockHashesOperatorMockRecorder) HGetAll(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetAll", reflect.TypeOf((*MockHashesOperator)(nil).HGetAll), key)
}

// HIncrBy mocks base method
func (m *MockHashesOperator) HIncrBy(key, field string, incr int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HIncrBy", key, field, incr)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HIncrBy indicates an expected call of HIncrBy
func (mr *MockHashesOperatorMockRecorder) HIncrBy(key, field, incr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HIncrBy", reflect.TypeOf((*MockHashesOperator)(nil).HIncrBy), key, field, incr)
}

// HIncrByFloat mocks base method
func (m *MockHashesOperator) HIncrByFloat(key, field string, incr float64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HIncrByFloat", key, field, incr)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HIncrByFloat indicates an expected call of HIncrByFloat
func (mr *MockHashesOperatorMockRecorder) HIncrByFloat(key, field, incr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HIncrByFloat", reflect.TypeOf((*MockHashesOperator)(nil).HIncrByFloat), key, field, incr)
}

// HKeys mocks base method
func (m *MockHashesOperator) HKeys(key string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HKeys", key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HKeys indicates an expected call of HKeys
func (mr *MockHashesOperatorMockRecorder) HKeys(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HKeys", reflect.TypeOf((*MockHashesOperator)(nil).HKeys), key)
}

// HLen mocks base method
func (m *MockHashesOperator) HLen(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HLen", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HLen indicates an expected call of HLen
func (mr *MockHashesOperatorMockRecorder) HLen(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HLen", reflect.TypeOf((*MockHashesOperator)(nil).HLen), key)
}

// HMGet mocks base method
func (m *MockHashesOperator) HMGet(key string, fields ...string) ([]interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HMGet", varargs...)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HMGet indicates an expected call of HMGet
func (mr *MockHashesOperatorMockRecorder) HMGet(key interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMGet", reflect.TypeOf((*MockHashesOperator)(nil).HMGet), varargs...)
}

// HMSet mocks base method
func (m *MockHashesOperator) HMSet(key string, fields map[string]interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HMSet", key, fields)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HMSet indicates an expected call of HMSet
func (mr *MockHashesOperatorMockRecorder) HMSet(key, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMSet", reflect.TypeOf((*MockHashesOperator)(nil).HMSet), key, fields)
}

// HSet mocks base method
func (m *MockHashesOperator) HSet(key, field string, value interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HSet", key, field, value)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HSet indicates an expected call of HSet
func (mr *MockHashesOperatorMockRecorder) HSet(key, field, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSet", reflect.TypeOf((*MockHashesOperator)(nil).HSet), key, field, value)
}

// HSetNX mocks base method
func (m *MockHashesOperator) HSetNX(key, field string, value interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HSetNX", key, field, value)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HSetNX indicates an expected call of HSetNX
func (mr *MockHashesOperatorMockRecorder) HSetNX(key, field, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSetNX", reflect.TypeOf((*MockHashesOperator)(nil).HSetNX), key, field, value)
}

// HVals mocks base method
func (m *MockHashesOperator) HVals(key string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HVals", key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HVals indicates an expected call of HVals
func (mr *MockHashesOperatorMockRecorder) HVals(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HVals", reflect.TypeOf((*MockHashesOperator)(nil).HVals), key)
}

// HScan mocks base method
func (m *MockHashesOperator) HScan(key string, cursor uint64, match string, count int64) ([]string, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HScan", key, cursor, match, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// HScan indicates an expected call of HScan
func (mr *MockHashesOperatorMockRecorder) HScan(key, cursor, match, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HScan", reflect.TypeOf((*MockHashesOperator)(nil).HScan), key, cursor, match, count)
}

// MockListsOperator is a mock of ListsOperator interface
type MockListsOperator struct {
	ctrl     *gomock.Controller
	recorder *MockListsOperatorMockRecorder
}

// MockListsOperatorMockRecorder is the mock recorder for MockListsOperator
type MockListsOperatorMockRecorder struct {
	mock *MockListsOperator
}

// NewMockListsOperator creates a new mock instance
func NewMockListsOperator(ctrl *gomock.Controller) *MockListsOperator {
	mock := &MockListsOperator{ctrl: ctrl}
	mock.recorder = &MockListsOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockListsOperator) EXPECT() *MockListsOperatorMockRecorder {
	return m.recorder
}

// BLPop mocks base method
func (m *MockListsOperator) BLPop(timeout time.Duration, keys ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{timeout}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BLPop", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BLPop indicates an expected call of BLPop
func (mr *MockListsOperatorMockRecorder) BLPop(timeout interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{timeout}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BLPop", reflect.TypeOf((*MockListsOperator)(nil).BLPop), varargs...)
}

// BRPop mocks base method
func (m *MockListsOperator) BRPop(timeout time.Duration, keys ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{timeout}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BRPop", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BRPop indicates an expected call of BRPop
func (mr *MockListsOperatorMockRecorder) BRPop(timeout interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{timeout}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BRPop", reflect.TypeOf((*MockListsOperator)(nil).BRPop), varargs...)
}

// BRPopLPush mocks base method
func (m *MockListsOperator) BRPopLPush(source, destination string, timeout time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BRPopLPush", source, destination, timeout)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BRPopLPush indicates an expected call of BRPopLPush
func (mr *MockListsOperatorMockRecorder) BRPopLPush(source, destination, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BRPopLPush", reflect.TypeOf((*MockListsOperator)(nil).BRPopLPush), source, destination, timeout)
}

// LIndex mocks base method
func (m *MockListsOperator) LIndex(key string, index int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LIndex", key, index)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LIndex indicates an expected call of LIndex
func (mr *MockListsOperatorMockRecorder) LIndex(key, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LIndex", reflect.TypeOf((*MockListsOperator)(nil).LIndex), key, index)
}

// LInsert mocks base method
func (m *MockListsOperator) LInsert(key, op string, pivot, value interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LInsert", key, op, pivot, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LInsert indicates an expected call of LInsert
func (mr *MockListsOperatorMockRecorder) LInsert(key, op, pivot, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LInsert", reflect.TypeOf((*MockListsOperator)(nil).LInsert), key, op, pivot, value)
}

// LInsertBefore mocks base method
func (m *MockListsOperator) LInsertBefore(key string, pivot, value interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LInsertBefore", key, pivot, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LInsertBefore indicates an expected call of LInsertBefore
func (mr *MockListsOperatorMockRecorder) LInsertBefore(key, pivot, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LInsertBefore", reflect.TypeOf((*MockListsOperator)(nil).LInsertBefore), key, pivot, value)
}

// LInsertAfter mocks base method
func (m *MockListsOperator) LInsertAfter(key string, pivot, value interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LInsertAfter", key, pivot, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LInsertAfter indicates an expected call of LInsertAfter
func (mr *MockListsOperatorMockRecorder) LInsertAfter(key, pivot, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LInsertAfter", reflect.TypeOf((*MockListsOperator)(nil).LInsertAfter), key, pivot, value)
}

// LLen mocks base method
func (m *MockListsOperator) LLen(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LLen", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LLen indicates an expected call of LLen
func (mr *MockListsOperatorMockRecorder) LLen(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LLen", reflect.TypeOf((*MockListsOperator)(nil).LLen), key)
}

// LPop mocks base method
func (m *MockListsOperator) LPop(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LPop", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LPop indicates an expected call of LPop
func (mr *MockListsOperatorMockRecorder) LPop(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPop", reflect.TypeOf((*MockListsOperator)(nil).LPop), key)
}

// LPush mocks base method
func (m *MockListsOperator) LPush(key string, values ...interface{}) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LPush", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LPush indicates an expected call of LPush
func (mr *MockListsOperatorMockRecorder) LPush(key interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPush", reflect.TypeOf((*MockListsOperator)(nil).LPush), varargs...)
}

// LPushX mocks base method
func (m *MockListsOperator) LPushX(key string, value interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LPushX", key, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LPushX indicates an expected call of LPushX
func (mr *MockListsOperatorMockRecorder) LPushX(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPushX", reflect.TypeOf((*MockListsOperator)(nil).LPushX), key, value)
}

// LRange mocks base method
func (m *MockListsOperator) LRange(key string, start, stop int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LRange", key, start, stop)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LRange indicates an expected call of LRange
func (mr *MockListsOperatorMockRecorder) LRange(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LRange", reflect.TypeOf((*MockListsOperator)(nil).LRange), key, start, stop)
}

// LRem mocks base method
func (m *MockListsOperator) LRem(key string, count int64, value interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LRem", key, count, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LRem indicates an expected call of LRem
func (mr *MockListsOperatorMockRecorder) LRem(key, count, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LRem", reflect.TypeOf((*MockListsOperator)(nil).LRem), key, count, value)
}

// LSet mocks base method
func (m *MockListsOperator) LSet(key string, index int64, value interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LSet", key, index, value)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LSet indicates an expected call of LSet
func (mr *MockListsOperatorMockRecorder) LSet(key, index, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LSet", reflect.TypeOf((*MockListsOperator)(nil).LSet), key, index, value)
}

// LTrim mocks base method
func (m *MockListsOperator) LTrim(key string, start, stop int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LTrim", key, start, stop)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LTrim indicates an expected call of LTrim
func (mr *MockListsOperatorMockRecorder) LTrim(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LTrim", reflect.TypeOf((*MockListsOperator)(nil).LTrim), key, start, stop)
}

// RPop mocks base method
func (m *MockListsOperator) RPop(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPop", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RPop indicates an expected call of RPop
func (mr *MockListsOperatorMockRecorder) RPop(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPop", reflect.TypeOf((*MockListsOperator)(nil).RPop), key)
}

// RPopLPush mocks base method
func (m *MockListsOperator) RPopLPush(source, destination string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPopLPush", source, destination)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RPopLPush indicates an expected call of RPopLPush
func (mr *MockListsOperatorMockRecorder) RPopLPush(source, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPopLPush", reflect.TypeOf((*MockListsOperator)(nil).RPopLPush), source, destination)
}

// RPush mocks base method
func (m *MockListsOperator) RPush(key string, values ...interface{}) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RPush", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RPush indicates an expected call of RPush
func (mr *MockListsOperatorMockRecorder) RPush(key interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPush", reflect.TypeOf((*MockListsOperator)(nil).RPush), varargs...)
}

// RPushX mocks base method
func (m *MockListsOperator) RPushX(key string, value interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPushX", key, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RPushX indicates an expected call of RPushX
func (mr *MockListsOperatorMockRecorder) RPushX(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPushX", reflect.TypeOf((*MockListsOperator)(nil).RPushX), key, value)
}

// MockSetsOperator is a mock of SetsOperator interface
type MockSetsOperator struct {
	ctrl     *gomock.Controller
	recorder *MockSetsOperatorMockRecorder
}

// MockSetsOperatorMockRecorder is the mock recorder for MockSetsOperator
type MockSetsOperatorMockRecorder struct {
	mock *MockSetsOperator
}

// NewMockSetsOperator creates a new mock instance
func NewMockSetsOperator(ctrl *gomock.Controller) *MockSetsOperator {
	mock := &MockSetsOperator{ctrl: ctrl}
	mock.recorder = &MockSetsOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSetsOperator) EXPECT() *MockSetsOperatorMockRecorder {
	return m.recorder
}

// SAdd mocks base method
func (m *MockSetsOperator) SAdd(key string, members ...interface{}) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SAdd", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SAdd indicates an expected call of SAdd
func (mr *MockSetsOperatorMockRecorder) SAdd(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SAdd", reflect.TypeOf((*MockSetsOperator)(nil).SAdd), varargs...)
}

// SCard mocks base method
func (m *MockSetsOperator) SCard(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SCard", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SCard indicates an expected call of SCard
func (mr *MockSetsOperatorMockRecorder) SCard(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SCard", reflect.TypeOf((*MockSetsOperator)(nil).SCard), key)
}

// SDiff mocks base method
func (m *MockSetsOperator) SDiff(keys ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SDiff", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SDiff indicates an expected call of SDiff
func (mr *MockSetsOperatorMockRecorder) SDiff(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SDiff", reflect.TypeOf((*MockSetsOperator)(nil).SDiff), keys...)
}

// SDiffStore mocks base method
func (m *MockSetsOperator) SDiffStore(destination string, keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{destination}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SDiffStore", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SDiffStore indicates an expected call of SDiffStore
func (mr *MockSetsOperatorMockRecorder) SDiffStore(destination interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destination}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SDiffStore", reflect.TypeOf((*MockSetsOperator)(nil).SDiffStore), varargs...)
}

// SInter mocks base method
func (m *MockSetsOperator) SInter(keys ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SInter", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SInter indicates an expected call of SInter
func (mr *MockSetsOperatorMockRecorder) SInter(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SInter", reflect.TypeOf((*MockSetsOperator)(nil).SInter), keys...)
}

// SInterStore mocks base method
func (m *MockSetsOperator) SInterStore(destination string, keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{destination}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SInterStore", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SInterStore indicates an expected call of SInterStore
func (mr *MockSetsOperatorMockRecorder) SInterStore(destination interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destination}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SInterStore", reflect.TypeOf((*MockSetsOperator)(nil).SInterStore), varargs...)
}

// SIsMember mocks base method
func (m *MockSetsOperator) SIsMember(key string, member interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SIsMember", key, member)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SIsMember indicates an expected call of SIsMember
func (mr *MockSetsOperatorMockRecorder) SIsMember(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SIsMember", reflect.TypeOf((*MockSetsOperator)(nil).SIsMember), key, member)
}

// SMembers mocks base method
func (m *MockSetsOperator) SMembers(key string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMembers", key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SMembers indicates an expected call of SMembers
func (mr *MockSetsOperatorMockRecorder) SMembers(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMembers", reflect.TypeOf((*MockSetsOperator)(nil).SMembers), key)
}

// SMembersMap mocks base method
func (m *MockSetsOperator) SMembersMap(key string) (map[string]struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMembersMap", key)
	ret0, _ := ret[0].(map[string]struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SMembersMap indicates an expected call of SMembersMap
func (mr *MockSetsOperatorMockRecorder) SMembersMap(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMembersMap", reflect.TypeOf((*MockSetsOperator)(nil).SMembersMap), key)
}

// SMove mocks base method
func (m *MockSetsOperator) SMove(source, destination string, member interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMove", source, destination, member)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SMove indicates an expected call of SMove
func (mr *MockSetsOperatorMockRecorder) SMove(source, destination, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMove", reflect.TypeOf((*MockSetsOperator)(nil).SMove), source, destination, member)
}

// SPop mocks base method
func (m *MockSetsOperator) SPop(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SPop", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SPop indicates an expected call of SPop
func (mr *MockSetsOperatorMockRecorder) SPop(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SPop", reflect.TypeOf((*MockSetsOperator)(nil).SPop), key)
}

// SPopN mocks base method
func (m *MockSetsOperator) SPopN(key string, count int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SPopN", key, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SPopN indicates an expected call of SPopN
func (mr *MockSetsOperatorMockRecorder) SPopN(key, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SPopN", reflect.TypeOf((*MockSetsOperator)(nil).SPopN), key, count)
}

// SRandMember mocks base method
func (m *MockSetsOperator) SRandMember(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SRandMember", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SRandMember indicates an expected call of SRandMember
func (mr *MockSetsOperatorMockRecorder) SRandMember(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SRandMember", reflect.TypeOf((*MockSetsOperator)(nil).SRandMember), key)
}

// SRandMemberN mocks base method
func (m *MockSetsOperator) SRandMemberN(key string, count int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SRandMemberN", key, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SRandMemberN indicates an expected call of SRandMemberN
func (mr *MockSetsOperatorMockRecorder) SRandMemberN(key, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SRandMemberN", reflect.TypeOf((*MockSetsOperator)(nil).SRandMemberN), key, count)
}

// SRem mocks base method
func (m *MockSetsOperator) SRem(key string, members ...interface{}) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SRem", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SRem indicates an expected call of SRem
func (mr *MockSetsOperatorMockRecorder) SRem(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SRem", reflect.TypeOf((*MockSetsOperator)(nil).SRem), varargs...)
}

// SUnion mocks base method
func (m *MockSetsOperator) SUnion(keys ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SUnion", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SUnion indicates an expected call of SUnion
func (mr *MockSetsOperatorMockRecorder) SUnion(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SUnion", reflect.TypeOf((*MockSetsOperator)(nil).SUnion), keys...)
}

// SUnionStore mocks base method
func (m *MockSetsOperator) SUnionStore(destination string, keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{destination}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SUnionStore", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SUnionStore indicates an expected call of SUnionStore
func (mr *MockSetsOperatorMockRecorder) SUnionStore(destination interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destination}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SUnionStore", reflect.TypeOf((*MockSetsOperator)(nil).SUnionStore), varargs...)
}

// SScan mocks base method
func (m *MockSetsOperator) SScan(key string, cursor uint64, match string, count int64) ([]string, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SScan", key, cursor, match, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SScan indicates an expected call of SScan
func (mr *MockSetsOperatorMockRecorder) SScan(key, cursor, match, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SScan", reflect.TypeOf((*MockSetsOperator)(nil).SScan), key, cursor, match, count)
}

// MockSortedSetsOperator is a mock of SortedSetsOperator interface
type MockSortedSetsOperator struct {
	ctrl     *gomock.Controller
	recorder *MockSortedSetsOperatorMockRecorder
}

// MockSortedSetsOperatorMockRecorder is the mock recorder for MockSortedSetsOperator
type MockSortedSetsOperatorMockRecorder struct {
	mock *MockSortedSetsOperator
}

// NewMockSortedSetsOperator creates a new mock instance
func NewMockSortedSetsOperator(ctrl *gomock.Controller) *MockSortedSetsOperator {
	mock := &MockSortedSetsOperator{ctrl: ctrl}
	mock.recorder = &MockSortedSetsOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSortedSetsOperator) EXPECT() *MockSortedSetsOperatorMockRecorder {
	return m.recorder
}

// ZAdd mocks base method
func (m *MockSortedSetsOperator) ZAdd(key string, members ...redis.Z) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAdd", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZAdd indicates an expected call of ZAdd
func (mr *MockSortedSetsOperatorMockRecorder) ZAdd(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAdd", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZAdd), varargs...)
}

// ZAddNX mocks base method
func (m *MockSortedSetsOperator) ZAddNX(key string, members ...redis.Z) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAddNX", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZAddNX indicates an expected call of ZAddNX
func (mr *MockSortedSetsOperatorMockRecorder) ZAddNX(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddNX", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZAddNX), varargs...)
}

// ZAddXX mocks base method
func (m *MockSortedSetsOperator) ZAddXX(key string, members ...redis.Z) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAddXX", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZAddXX indicates an expected call of ZAddXX
func (mr *MockSortedSetsOperatorMockRecorder) ZAddXX(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddXX", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZAddXX), varargs...)
}

// ZAddCh mocks base method
func (m *MockSortedSetsOperator) ZAddCh(key string, members ...redis.Z) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAddCh", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZAddCh indicates an expected call of ZAddCh
func (mr *MockSortedSetsOperatorMockRecorder) ZAddCh(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddCh", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZAddCh), varargs...)
}

// ZAddNXCh mocks base method
func (m *MockSortedSetsOperator) ZAddNXCh(key string, members ...redis.Z) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAddNXCh", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZAddNXCh indicates an expected call of ZAddNXCh
func (mr *MockSortedSetsOperatorMockRecorder) ZAddNXCh(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddNXCh", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZAddNXCh), varargs...)
}

// ZAddXXCh mocks base method
func (m *MockSortedSetsOperator) ZAddXXCh(key string, members ...redis.Z) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAddXXCh", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZAddXXCh indicates an expected call of ZAddXXCh
func (mr *MockSortedSetsOperatorMockRecorder) ZAddXXCh(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddXXCh", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZAddXXCh), varargs...)
}

// ZIncr mocks base method
func (m *MockSortedSetsOperator) ZIncr(key string, member redis.Z) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZIncr", key, member)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZIncr indicates an expected call of ZIncr
func (mr *MockSortedSetsOperatorMockRecorder) ZIncr(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZIncr", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZIncr), key, member)
}

// ZIncrNX mocks base method
func (m *MockSortedSetsOperator) ZIncrNX(key string, member redis.Z) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZIncrNX", key, member)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZIncrNX indicates an expected call of ZIncrNX
func (mr *MockSortedSetsOperatorMockRecorder) ZIncrNX(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZIncrNX", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZIncrNX), key, member)
}

// ZIncrXX mocks base method
func (m *MockSortedSetsOperator) ZIncrXX(key string, member redis.Z) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZIncrXX", key, member)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZIncrXX indicates an expected call of ZIncrXX
func (mr *MockSortedSetsOperatorMockRecorder) ZIncrXX(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZIncrXX", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZIncrXX), key, member)
}

// ZCard mocks base method
func (m *MockSortedSetsOperator) ZCard(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZCard", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZCard indicates an expected call of ZCard
func (mr *MockSortedSetsOperatorMockRecorder) ZCard(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZCard", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZCard), key)
}

// ZCount mocks base method
func (m *MockSortedSetsOperator) ZCount(key, min, max string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZCount", key, min, max)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZCount indicates an expected call of ZCount
func (mr *MockSortedSetsOperatorMockRecorder) ZCount(key, min, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZCount", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZCount), key, min, max)
}

// ZLexCount mocks base method
func (m *MockSortedSetsOperator) ZLexCount(key, min, max string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZLexCount", key, min, max)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZLexCount indicates an expected call of ZLexCount
func (mr *MockSortedSetsOperatorMockRecorder) ZLexCount(key, min, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZLexCount", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZLexCount), key, min, max)
}

// ZIncrBy mocks base method
func (m *MockSortedSetsOperator) ZIncrBy(key string, increment float64, member string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZIncrBy", key, increment, member)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZIncrBy indicates an expected call of ZIncrBy
func (mr *MockSortedSetsOperatorMockRecorder) ZIncrBy(key, increment, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZIncrBy", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZIncrBy), key, increment, member)
}

// ZInterStore mocks base method
func (m *MockSortedSetsOperator) ZInterStore(destination string, store redis.ZStore, keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{destination, store}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZInterStore", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZInterStore indicates an expected call of ZInterStore
func (mr *MockSortedSetsOperatorMockRecorder) ZInterStore(destination, store interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destination, store}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZInterStore", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZInterStore), varargs...)
}

// ZPopMax mocks base method
func (m *MockSortedSetsOperator) ZPopMax(key string, count ...int64) ([]redis.Z, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range count {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZPopMax", varargs...)
	ret0, _ := ret[0].([]redis.Z)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZPopMax indicates an expected call of ZPopMax
func (mr *MockSortedSetsOperatorMockRecorder) ZPopMax(key interface{}, count ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, count...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZPopMax", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZPopMax), varargs...)
}

// ZPopMin mocks base method
func (m *MockSortedSetsOperator) ZPopMin(key string, count ...int64) ([]redis.Z, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range count {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZPopMin", varargs...)
	ret0, _ := ret[0].([]redis.Z)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZPopMin indicates an expected call of ZPopMin
func (mr *MockSortedSetsOperatorMockRecorder) ZPopMin(key interface{}, count ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, count...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZPopMin", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZPopMin), varargs...)
}

// ZRange mocks base method
func (m *MockSortedSetsOperator) ZRange(key string, start, stop int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRange", key, start, stop)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRange indicates an expected call of ZRange
func (mr *MockSortedSetsOperatorMockRecorder) ZRange(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRange", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZRange), key, start, stop)
}

// ZRangeWithScores mocks base method
func (m *MockSortedSetsOperator) ZRangeWithScores(key string, start, stop int64) ([]redis.Z, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeWithScores", key, start, stop)
	ret0, _ := ret[0].([]redis.Z)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRangeWithScores indicates an expected call of ZRangeWithScores
func (mr *MockSortedSetsOperatorMockRecorder) ZRangeWithScores(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeWithScores", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZRangeWithScores), key, start, stop)
}

// ZRangeByScore mocks base method
func (m *MockSortedSetsOperator) ZRangeByScore(key string, opt redis.ZRangeBy) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeByScore", key, opt)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRangeByScore indicates an expected call of ZRangeByScore
func (mr *MockSortedSetsOperatorMockRecorder) ZRangeByScore(key, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeByScore", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZRangeByScore), key, opt)
}

// ZRangeByLex mocks base method
func (m *MockSortedSetsOperator) ZRangeByLex(key string, opt redis.ZRangeBy) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeByLex", key, opt)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRangeByLex indicates an expected call of ZRangeByLex
func (mr *MockSortedSetsOperatorMockRecorder) ZRangeByLex(key, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeByLex", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZRangeByLex), key, opt)
}

// ZRangeByScoreWithScores mocks base method
func (m *MockSortedSetsOperator) ZRangeByScoreWithScores(key string, opt redis.ZRangeBy) ([]redis.Z, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeByScoreWithScores", key, opt)
	ret0, _ := ret[0].([]redis.Z)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRangeByScoreWithScores indicates an expected call of ZRangeByScoreWithScores
func (mr *MockSortedSetsOperatorMockRecorder) ZRangeByScoreWithScores(key, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeByScoreWithScores", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZRangeByScoreWithScores), key, opt)
}

// ZRank mocks base method
func (m *MockSortedSetsOperator) ZRank(key, member string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRank", key, member)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRank indicates an expected call of ZRank
func (mr *MockSortedSetsOperatorMockRecorder) ZRank(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRank", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZRank), key, member)
}

// ZRem mocks base method
func (m *MockSortedSetsOperator) ZRem(key string, members ...interface{}) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZRem", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRem indicates an expected call of ZRem
func (mr *MockSortedSetsOperatorMockRecorder) ZRem(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRem", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZRem), varargs...)
}

// ZRemRangeByRank mocks base method
func (m *MockSortedSetsOperator) ZRemRangeByRank(key string, start, stop int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRemRangeByRank", key, start, stop)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRemRangeByRank indicates an expected call of ZRemRangeByRank
func (mr *MockSortedSetsOperatorMockRecorder) ZRemRangeByRank(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRemRangeByRank", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZRemRangeByRank), key, start, stop)
}

// ZRemRangeByScore mocks base method
func (m *MockSortedSetsOperator) ZRemRangeByScore(key, min, max string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRemRangeByScore", key, min, max)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRemRangeByScore indicates an expected call of ZRemRangeByScore
func (mr *MockSortedSetsOperatorMockRecorder) ZRemRangeByScore(key, min, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRemRangeByScore", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZRemRangeByScore), key, min, max)
}

// ZRemRangeByLex mocks base method
func (m *MockSortedSetsOperator) ZRemRangeByLex(key, min, max string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRemRangeByLex", key, min, max)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRemRangeByLex indicates an expected call of ZRemRangeByLex
func (mr *MockSortedSetsOperatorMockRecorder) ZRemRangeByLex(key, min, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRemRangeByLex", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZRemRangeByLex), key, min, max)
}

// ZRevRange mocks base method
func (m *MockSortedSetsOperator) ZRevRange(key string, start, stop int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRange", key, start, stop)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRevRange indicates an expected call of ZRevRange
func (mr *MockSortedSetsOperatorMockRecorder) ZRevRange(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRange", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZRevRange), key, start, stop)
}

// ZRevRangeWithScores mocks base method
func (m *MockSortedSetsOperator) ZRevRangeWithScores(key string, start, stop int64) ([]redis.Z, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRangeWithScores", key, start, stop)
	ret0, _ := ret[0].([]redis.Z)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRevRangeWithScores indicates an expected call of ZRevRangeWithScores
func (mr *MockSortedSetsOperatorMockRecorder) ZRevRangeWithScores(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRangeWithScores", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZRevRangeWithScores), key, start, stop)
}

// ZRevRangeByScore mocks base method
func (m *MockSortedSetsOperator) ZRevRangeByScore(key string, opt redis.ZRangeBy) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRangeByScore", key, opt)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRevRangeByScore indicates an expected call of ZRevRangeByScore
func (mr *MockSortedSetsOperatorMockRecorder) ZRevRangeByScore(key, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRangeByScore", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZRevRangeByScore), key, opt)
}

// ZRevRangeByLex mocks base method
func (m *MockSortedSetsOperator) ZRevRangeByLex(key string, opt redis.ZRangeBy) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRangeByLex", key, opt)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRevRangeByLex indicates an expected call of ZRevRangeByLex
func (mr *MockSortedSetsOperatorMockRecorder) ZRevRangeByLex(key, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRangeByLex", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZRevRangeByLex), key, opt)
}

// ZRevRangeByScoreWithScores mocks base method
func (m *MockSortedSetsOperator) ZRevRangeByScoreWithScores(key string, opt redis.ZRangeBy) ([]redis.Z, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRangeByScoreWithScores", key, opt)
	ret0, _ := ret[0].([]redis.Z)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRevRangeByScoreWithScores indicates an expected call of ZRevRangeByScoreWithScores
func (mr *MockSortedSetsOperatorMockRecorder) ZRevRangeByScoreWithScores(key, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRangeByScoreWithScores", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZRevRangeByScoreWithScores), key, opt)
}

// ZRevRank mocks base method
func (m *MockSortedSetsOperator) ZRevRank(key, member string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRank", key, member)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRevRank indicates an expected call of ZRevRank
func (mr *MockSortedSetsOperatorMockRecorder) ZRevRank(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRank", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZRevRank), key, member)
}

// ZScore mocks base method
func (m *MockSortedSetsOperator) ZScore(key, member string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZScore", key, member)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZScore indicates an expected call of ZScore
func (mr *MockSortedSetsOperatorMockRecorder) ZScore(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZScore", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZScore), key, member)
}

// ZUnionStore mocks base method
func (m *MockSortedSetsOperator) ZUnionStore(dest string, store redis.ZStore, keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest, store}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZUnionStore", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZUnionStore indicates an expected call of ZUnionStore
func (mr *MockSortedSetsOperatorMockRecorder) ZUnionStore(dest, store interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest, store}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZUnionStore", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZUnionStore), varargs...)
}

// ZScan mocks base method
func (m *MockSortedSetsOperator) ZScan(key string, cursor uint64, match string, count int64) ([]string, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZScan", key, cursor, match, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ZScan indicates an expected call of ZScan
func (mr *MockSortedSetsOperatorMockRecorder) ZScan(key, cursor, match, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZScan", reflect.TypeOf((*MockSortedSetsOperator)(nil).ZScan), key, cursor, match, count)
}

// MockGeoOperator is a mock of GeoOperator interface
type MockGeoOperator struct {
	ctrl     *gomock.Controller
	recorder *MockGeoOperatorMockRecorder
}

// MockGeoOperatorMockRecorder is the mock recorder for MockGeoOperator
type MockGeoOperatorMockRecorder struct {
	mock *MockGeoOperator
}

// NewMockGeoOperator creates a new mock instance
func NewMockGeoOperator(ctrl *gomock.Controller) *MockGeoOperator {
	mock := &MockGeoOperator{ctrl: ctrl}
	mock.recorder = &MockGeoOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGeoOperator) EXPECT() *MockGeoOperatorMockRecorder {
	return m.recorder
}

// GeoAdd mocks base method
func (m *MockGeoOperator) GeoAdd(key string, geoLocation ...*redis.GeoLocation) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range geoLocation {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GeoAdd", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoAdd indicates an expected call of GeoAdd
func (mr *MockGeoOperatorMockRecorder) GeoAdd(key interface{}, geoLocation ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, geoLocation...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoAdd", reflect.TypeOf((*MockGeoOperator)(nil).GeoAdd), varargs...)
}

// GeoPos mocks base method
func (m *MockGeoOperator) GeoPos(key string, members ...string) ([]*redis.GeoPos, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GeoPos", varargs...)
	ret0, _ := ret[0].([]*redis.GeoPos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoPos indicates an expected call of GeoPos
func (mr *MockGeoOperatorMockRecorder) GeoPos(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoPos", reflect.TypeOf((*MockGeoOperator)(nil).GeoPos), varargs...)
}

// GeoRadius mocks base method
func (m *MockGeoOperator) GeoRadius(key string, longitude, latitude float64, query *redis.GeoRadiusQuery) ([]redis.GeoLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoRadius", key, longitude, latitude, query)
	ret0, _ := ret[0].([]redis.GeoLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoRadius indicates an expected call of GeoRadius
func (mr *MockGeoOperatorMockRecorder) GeoRadius(key, longitude, latitude, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoRadius", reflect.TypeOf((*MockGeoOperator)(nil).GeoRadius), key, longitude, latitude, query)
}

// GeoRadiusRO mocks base method
func (m *MockGeoOperator) GeoRadiusRO(key string, longitude, latitude float64, query *redis.GeoRadiusQuery) ([]redis.GeoLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoRadiusRO", key, longitude, latitude, query)
	ret0, _ := ret[0].([]redis.GeoLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoRadiusRO indicates an expected call of GeoRadiusRO
func (mr *MockGeoOperatorMockRecorder) GeoRadiusRO(key, longitude, latitude, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoRadiusRO", reflect.TypeOf((*MockGeoOperator)(nil).GeoRadiusRO), key, longitude, latitude, query)
}

// GeoRadiusByMember mocks base method
func (m *MockGeoOperator) GeoRadiusByMember(key, member string, query *redis.GeoRadiusQuery) ([]redis.GeoLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoRadiusByMember", key, member, query)
	ret0, _ := ret[0].([]redis.GeoLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoRadiusByMember indicates an expected call of GeoRadiusByMember
func (mr *MockGeoOperatorMockRecorder) GeoRadiusByMember(key, member, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoRadiusByMember", reflect.TypeOf((*MockGeoOperator)(nil).GeoRadiusByMember), key, member, query)
}

// GeoRadiusByMemberRO mocks base method
func (m *MockGeoOperator) GeoRadiusByMemberRO(key, member string, query *redis.GeoRadiusQuery) ([]redis.GeoLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoRadiusByMemberRO", key, member, query)
	ret0, _ := ret[0].([]redis.GeoLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoRadiusByMemberRO indicates an expected call of GeoRadiusByMemberRO
func (mr *MockGeoOperatorMockRecorder) GeoRadiusByMemberRO(key, member, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoRadiusByMemberRO", reflect.TypeOf((*MockGeoOperator)(nil).GeoRadiusByMemberRO), key, member, query)
}

// GeoDist mocks base method
func (m *MockGeoOperator) GeoDist(key, member1, member2, unit string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoDist", key, member1, member2, unit)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoDist indicates an expected call of GeoDist
func (mr *MockGeoOperatorMockRecorder) GeoDist(key, member1, member2, unit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoDist", reflect.TypeOf((*MockGeoOperator)(nil).GeoDist), key, member1, member2, unit)
}

// GeoHash mocks base method
func (m *MockGeoOperator) GeoHash(key string, members ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GeoHash", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoHash indicates an expected call of GeoHash
func (mr *MockGeoOperatorMockRecorder) GeoHash(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoHash", reflect.TypeOf((*MockGeoOperator)(nil).GeoHash), varargs...)
}

// MockSubscriber is a mock of Subscriber interface
type MockSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberMockRecorder
}

// MockSubscriberMockRecorder is the mock recorder for MockSubscriber
type MockSubscriberMockRecorder struct {
	mock *MockSubscriber
}

// NewMockSubscriber creates a new mock instance
func NewMockSubscriber(ctrl *gomock.Controller) *MockSubscriber {
	mock := &MockSubscriber{ctrl: ctrl}
	mock.recorder = &MockSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSubscriber) EXPECT() *MockSubscriberMockRecorder {
	return m.recorder
}

// Channel mocks base method
func (m *MockSubscriber) Channel() <-chan *redis.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Channel")
	ret0, _ := ret[0].(<-chan *redis.Message)
	return ret0
}

// Channel indicates an expected call of Channel
func (mr *MockSubscriberMockRecorder) Channel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*MockSubscriber)(nil).Channel))
}

// MockPubSubOperator is a mock of PubSubOperator interface
type MockPubSubOperator struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubOperatorMockRecorder
}

// MockPubSubOperatorMockRecorder is the mock recorder for MockPubSubOperator
type MockPubSubOperatorMockRecorder struct {
	mock *MockPubSubOperator
}

// NewMockPubSubOperator creates a new mock instance
func NewMockPubSubOperator(ctrl *gomock.Controller) *MockPubSubOperator {
	mock := &MockPubSubOperator{ctrl: ctrl}
	mock.recorder = &MockPubSubOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPubSubOperator) EXPECT() *MockPubSubOperatorMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockPubSubOperator) Publish(channel string, message interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", channel, message)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish
func (mr *MockPubSubOperatorMockRecorder) Publish(channel, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPubSubOperator)(nil).Publish), channel, message)
}

// PubSubChannels mocks base method
func (m *MockPubSubOperator) PubSubChannels(pattern string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PubSubChannels", pattern)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PubSubChannels indicates an expected call of PubSubChannels
func (mr *MockPubSubOperatorMockRecorder) PubSubChannels(pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubSubChannels", reflect.TypeOf((*MockPubSubOperator)(nil).PubSubChannels), pattern)
}

// PubSubNumSub mocks base method
func (m *MockPubSubOperator) PubSubNumSub(channels ...string) (map[string]int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range channels {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PubSubNumSub", varargs...)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PubSubNumSub indicates an expected call of PubSubNumSub
func (mr *MockPubSubOperatorMockRecorder) PubSubNumSub(channels ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubSubNumSub", reflect.TypeOf((*MockPubSubOperator)(nil).PubSubNumSub), channels...)
}

// PubSubNumPat mocks base method
func (m *MockPubSubOperator) PubSubNumPat() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PubSubNumPat")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PubSubNumPat indicates an expected call of PubSubNumPat
func (mr *MockPubSubOperatorMockRecorder) PubSubNumPat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubSubNumPat", reflect.TypeOf((*MockPubSubOperator)(nil).PubSubNumPat))
}

// MockStreamsOperator is a mock of StreamsOperator interface
type MockStreamsOperator struct {
	ctrl     *gomock.Controller
	recorder *MockStreamsOperatorMockRecorder
}

// MockStreamsOperatorMockRecorder is the mock recorder for MockStreamsOperator
type MockStreamsOperatorMockRecorder struct {
	mock *MockStreamsOperator
}

// NewMockStreamsOperator creates a new mock instance
func NewMockStreamsOperator(ctrl *gomock.Controller) *MockStreamsOperator {
	mock := &MockStreamsOperator{ctrl: ctrl}
	mock.recorder = &MockStreamsOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStreamsOperator) EXPECT() *MockStreamsOperatorMockRecorder {
	return m.recorder
}

// XAdd mocks base method
func (m *MockStreamsOperator) XAdd(a *redis.XAddArgs) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XAdd", a)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XAdd indicates an expected call of XAdd
func (mr *MockStreamsOperatorMockRecorder) XAdd(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XAdd", reflect.TypeOf((*MockStreamsOperator)(nil).XAdd), a)
}

// XLen mocks base method
func (m *MockStreamsOperator) XLen(stream string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XLen", stream)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XLen indicates an expected call of XLen
func (mr *MockStreamsOperatorMockRecorder) XLen(stream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XLen", reflect.TypeOf((*MockStreamsOperator)(nil).XLen), stream)
}

// XRange mocks base method
func (m *MockStreamsOperator) XRange(stream, start, stop string) ([]redis.XMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRange", stream, start, stop)
	ret0, _ := ret[0].([]redis.XMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XRange indicates an expected call of XRange
func (mr *MockStreamsOperatorMockRecorder) XRange(stream, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRange", reflect.TypeOf((*MockStreamsOperator)(nil).XRange), stream, start, stop)
}

// XRangeN mocks base method
func (m *MockStreamsOperator) XRangeN(stream, start, stop string, count int64) ([]redis.XMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRangeN", stream, start, stop, count)
	ret0, _ := ret[0].([]redis.XMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XRangeN indicates an expected call of XRangeN
func (mr *MockStreamsOperatorMockRecorder) XRangeN(stream, start, stop, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRangeN", reflect.TypeOf((*MockStreamsOperator)(nil).XRangeN), stream, start, stop, count)
}

// XRevRange mocks base method
func (m *MockStreamsOperator) XRevRange(stream, start, stop string) ([]redis.XMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRevRange", stream, start, stop)
	ret0, _ := ret[0].([]redis.XMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XRevRange indicates an expected call of XRevRange
func (mr *MockStreamsOperatorMockRecorder) XRevRange(stream, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRevRange", reflect.TypeOf((*MockStreamsOperator)(nil).XRevRange), stream, start, stop)
}

// XRevRangeN mocks base method
func (m *MockStreamsOperator) XRevRangeN(stream, start, stop string, count int64) ([]redis.XMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRevRangeN", stream, start, stop, count)
	ret0, _ := ret[0].([]redis.XMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XRevRangeN indicates an expected call of XRevRangeN
func (mr *MockStreamsOperatorMockRecorder) XRevRangeN(stream, start, stop, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRevRangeN", reflect.TypeOf((*MockStreamsOperator)(nil).XRevRangeN), stream, start, stop, count)
}

// XRead mocks base method
func (m *MockStreamsOperator) XRead(a *redis.XReadArgs) ([]redis.XStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRead", a)
	ret0, _ := ret[0].([]redis.XStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XRead indicates an expected call of XRead
func (mr *MockStreamsOperatorMockRecorder) XRead(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRead", reflect.TypeOf((*MockStreamsOperator)(nil).XRead), a)
}

// XReadStreams mocks base method
func (m *MockStreamsOperator) XReadStreams(streams ...string) ([]redis.XStream, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range streams {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XReadStreams", varargs...)
	ret0, _ := ret[0].([]redis.XStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XReadStreams indicates an expected call of XReadStreams
func (mr *MockStreamsOperatorMockRecorder) XReadStreams(streams ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XReadStreams", reflect.TypeOf((*MockStreamsOperator)(nil).XReadStreams), streams...)
}

// XGroupCreate mocks base method
func (m *MockStreamsOperator) XGroupCreate(stream, group, start string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupCreate", stream, group, start)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XGroupCreate indicates an expected call of XGroupCreate
func (mr *MockStreamsOperatorMockRecorder) XGroupCreate(stream, group, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupCreate", reflect.TypeOf((*MockStreamsOperator)(nil).XGroupCreate), stream, group, start)
}

// XGroupSetID mocks base method
func (m *MockStreamsOperator) XGroupSetID(stream, group, start string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupSetID", stream, group, start)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XGroupSetID indicates an expected call of XGroupSetID
func (mr *MockStreamsOperatorMockRecorder) XGroupSetID(stream, group, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupSetID", reflect.TypeOf((*MockStreamsOperator)(nil).XGroupSetID), stream, group, start)
}

// XGroupDestroy mocks base method
func (m *MockStreamsOperator) XGroupDestroy(stream, group string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupDestroy", stream, group)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XGroupDestroy indicates an expected call of XGroupDestroy
func (mr *MockStreamsOperatorMockRecorder) XGroupDestroy(stream, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupDestroy", reflect.TypeOf((*MockStreamsOperator)(nil).XGroupDestroy), stream, group)
}

// XGroupDelConsumer mocks base method
func (m *MockStreamsOperator) XGroupDelConsumer(stream, group, consumer string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupDelConsumer", stream, group, consumer)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XGroupDelConsumer indicates an expected call of XGroupDelConsumer
func (mr *MockStreamsOperatorMockRecorder) XGroupDelConsumer(stream, group, consumer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupDelConsumer", reflect.TypeOf((*MockStreamsOperator)(nil).XGroupDelConsumer), stream, group, consumer)
}

// XReadGroup mocks base method
func (m *MockStreamsOperator) XReadGroup(a *redis.XReadGroupArgs) ([]redis.XStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XReadGroup", a)
	ret0, _ := ret[0].([]redis.XStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XReadGroup indicates an expected call of XReadGroup
func (mr *MockStreamsOperatorMockRecorder) XReadGroup(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XReadGroup", reflect.TypeOf((*MockStreamsOperator)(nil).XReadGroup), a)
}

// XAck mocks base method
func (m *MockStreamsOperator) XAck(stream, group string, ids ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{stream, group}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XAck", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XAck indicates an expected call of XAck
func (mr *MockStreamsOperatorMockRecorder) XAck(stream, group interface{}, ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{stream, group}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XAck", reflect.TypeOf((*MockStreamsOperator)(nil).XAck), varargs...)
}

// XPending mocks base method
func (m *MockStreamsOperator) XPending(stream, group string) (*redis.XPending, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XPending", stream, group)
	ret0, _ := ret[0].(*redis.XPending)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XPending indicates an expected call of XPending
func (mr *MockStreamsOperatorMockRecorder) XPending(stream, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XPending", reflect.TypeOf((*MockStreamsOperator)(nil).XPending), stream, group)
}

// XPendingExt mocks base method
func (m *MockStreamsOperator) XPendingExt(a *redis.XPendingExtArgs) ([]redis.XPendingExt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XPendingExt", a)
	ret0, _ := ret[0].([]redis.XPendingExt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XPendingExt indicates an expected call of XPendingExt
func (mr *MockStreamsOperatorMockRecorder) XPendingExt(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XPendingExt", reflect.TypeOf((*MockStreamsOperator)(nil).XPendingExt), a)
}

// XClaim mocks base method
func (m *MockStreamsOperator) XClaim(a *redis.XClaimArgs) ([]redis.XMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XClaim", a)
	ret0, _ := ret[0].([]redis.XMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XClaim indicates an expected call of XClaim
func (mr *MockStreamsOperatorMockRecorder) XClaim(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XClaim", reflect.TypeOf((*MockStreamsOperator)(nil).XClaim), a)
}

// XClaimJustID mocks base method
func (m *MockStreamsOperator) XClaimJustID(a *redis.XClaimArgs) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XClaimJustID", a)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XClaimJustID indicates an expected call of XClaimJustID
func (mr *MockStreamsOperatorMockRecorder) XClaimJustID(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XClaimJustID", reflect.TypeOf((*MockStreamsOperator)(nil).XClaimJustID), a)
}

// XTrim mocks base method
func (m *MockStreamsOperator) XTrim(key string, maxLen int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XTrim", key, maxLen)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XTrim indicates an expected call of XTrim
func (mr *MockStreamsOperatorMockRecorder) XTrim(key, maxLen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XTrim", reflect.TypeOf((*MockStreamsOperator)(nil).XTrim), key, maxLen)
}

// XTrimApprox mocks base method
func (m *MockStreamsOperator) XTrimApprox(key string, maxLen int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XTrimApprox", key, maxLen)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XTrimApprox indicates an expected call of XTrimApprox
func (mr *MockStreamsOperatorMockRecorder) XTrimApprox(key, maxLen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XTrimApprox", reflect.TypeOf((*MockStreamsOperator)(nil).XTrimApprox), key, maxLen)
}

// MockHyperLogLogOperator is a mock of HyperLogLogOperator interface
type MockHyperLogLogOperator struct {
	ctrl     *gomock.Controller
	recorder *MockHyperLogLogOperatorMockRecorder
}

// MockHyperLogLogOperatorMockRecorder is the mock recorder for MockHyperLogLogOperator
type MockHyperLogLogOperatorMockRecorder struct {
	mock *MockHyperLogLogOperator
}

// NewMockHyperLogLogOperator creates a new mock instance
func NewMockHyperLogLogOperator(ctrl *gomock.Controller) *MockHyperLogLogOperator {
	mock := &MockHyperLogLogOperator{ctrl: ctrl}
	mock.recorder = &MockHyperLogLogOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHyperLogLogOperator) EXPECT() *MockHyperLogLogOperatorMockRecorder {
	return m.recorder
}

// PFAdd mocks base method
func (m *MockHyperLogLogOperator) PFAdd(key string, els ...interface{}) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range els {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PFAdd", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PFAdd indicates an expected call of PFAdd
func (mr *MockHyperLogLogOperatorMockRecorder) PFAdd(key interface{}, els ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, els...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PFAdd", reflect.TypeOf((*MockHyperLogLogOperator)(nil).PFAdd), varargs...)
}

// PFCount mocks base method
func (m *MockHyperLogLogOperator) PFCount(keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PFCount", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PFCount indicates an expected call of PFCount
func (mr *MockHyperLogLogOperatorMockRecorder) PFCount(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PFCount", reflect.TypeOf((*MockHyperLogLogOperator)(nil).PFCount), keys...)
}

// PFMerge mocks base method
func (m *MockHyperLogLogOperator) PFMerge(dest string, keys ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PFMerge", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PFMerge indicates an expected call of PFMerge
func (mr *MockHyperLogLogOperatorMockRecorder) PFMerge(dest interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PFMerge", reflect.TypeOf((*MockHyperLogLogOperator)(nil).PFMerge), varargs...)
}
